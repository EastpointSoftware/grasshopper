/**
 * Copyright (c) 2015 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

module.exports = function(client) {
    client.user = {};

    /**
     * Get the current user
     *
     * @param  {Function}       callback                        Standard callback function
     * @param  {Object}         callback.err                    An error that occurred, if any
     * @param  {Object}         callback.body                   The JSON response from the REST API
     * @param  {Response}       callback.response               The response object as returned by requestjs
     * @see gh-user/lib/rest.js for more information
     */
    client.user.getMe = function(callback) {
        client._request('/api/me', 'GET', null, null, callback);
    };

    /**
     * Get a user
     *
     * @param  {Number}         id                              The id of the user to retrieve
     * @param  {Function}       callback                        Standard callback function
     * @param  {Object}         callback.err                    An error that occurred, if any
     * @param  {Object}         callback.body                   The JSON response from the REST API
     * @param  {Response}       callback.response               The response object as returned by requestjs
     * @see gh-user/lib/rest.js for more information
     */
    client.user.getUser = function(id, callback) {
        var url = '/api/users/' + client.util.encodeURIComponent(id);
        client._request(url, 'GET', null, null, callback);
    };

    /**
     * Get all users for an app
     *
     * @param  {Number}         [app]                           The id of the app to get the users for. Defaults to the current app
     * @param  {String}         [query]                         The string to query users by
     * @param  {Number}         [limit]                         The maximum number of results to retrieve. Defaults to 10
     * @param  {Number}         [offset]                        The number to start paging from. Defaults to 0
     * @param  {Function}       callback                        Standard callback function
     * @param  {Object}         callback.err                    An error that occurred, if any
     * @param  {Object}         callback.body                   The JSON response from the REST API
     * @param  {Response}       callback.response               The response object as returned by requestjs
     * @see gh-user/lib/rest.js for more information
     */
    client.user.getUsers = function(app, query, limit, offset, callback) {
        var data = {
            'app': app,
            'q': query,
            'limit': limit,
            'offset': offset
        };
        client._request('/api/users', 'GET', data, null, callback);
    };

    /**
     * Create a new user with a local authentication strategy
     *
     * @param  {String}         displayName                     The name of the user
     * @param  {String}         email                           The email address for the user. This will be used as the username for the user
     * @param  {String}         password                        The password with which the user will authenticate
     * @param  {Object}         opts                            Optional user creation values
     * @param  {Number}         [opts.app]                      The id of the app on which the user should be created. Only required when a global administrator is creating the user
     * @param  {String}         [opts.emailPreference]          The email preference for the user
     * @param  {Boolean}        [opts.isAdmin]                  Whether the user is an app administrator
     * @param  {String}         [opts.recaptchaChallenge]       The identifier for the recaptcha challenge. Only required when the current user is not an app administrator
     * @param  {String}         [opts.recaptchaResponse]        The recaptcha response entered for the presented challenge. Only required when the current user is not an app administrator
     * @param  {Function}       callback                        Standard callback function
     * @param  {Object}         callback.err                    An error that occurred, if any
     * @param  {Object}         callback.body                   The JSON response from the REST API
     * @param  {Response}       callback.response               The response object as returned by requestjs
     * @see gh-user/lib/rest.js for more information
     */
    client.user.createUser = function(displayName, email, password, opts, callback) {
        opts = opts || {};
        var user = {
            'displayName': displayName,
            'email': email,
            'password': password,
            'app': opts.app,
            'emailPreference': opts.emailPreference,
            'isAdmin': opts.isAdmin,
            'recaptchaChallenge': opts.recaptchaChallenge,
            'recaptchaResponse': opts.recaptchaResponse
        };
        client._request('/api/users', 'POST', user, null, callback);
    };

    /**
     * Update a user
     *
     * @param  {Number}             id                              The id of the user to update
     * @param  {Object}             update                          The updates to make
     * @param  {String}             [update.displayName]            The updated displayName
     * @param  {String}             [update.email]                  The updated email
     * @param  {String}             [update.emailPreference]        The updated email preference
     * @param  {Function}           callback                        Standard callback function
     * @param  {Object}             callback.err                    An error that occurred, if any
     * @param  {Object}             callback.body                   The JSON response from the REST API
     * @param  {Response}           callback.response               The response object as returned by requestjs
     * @see gh-user/lib/rest.js for more information
     */
    client.user.updateUser = function(id, update, callback) {
        var url = '/api/users/' + client.util.encodeURIComponent(id);
        client._request(url, 'POST', update, null, callback);
    };

    /**
     * Change a user's local password
     *
     * @param  {Number}             id                              The id of user for which to change the local password
     * @param  {String}             newPassword                     The new password for the user
     * @param  {String}             password                        The password of the user making the change
     * @param  {Function}           callback                        Standard callback function
     * @param  {Object}             callback.err                    An error that occurred, if any
     * @param  {Object}             callback.body                   The JSON response from the REST API
     * @param  {Response}           callback.response               The response object as returned by requestjs
     * @see gh-user/lib/rest.js for more information
     */
    client.user.changePassword = function(id, newPassword, password, callback) {
        var url = '/api/users/' + client.util.encodeURIComponent(id) + '/password';
        var update = {
            'newPassword': newPassword,
            'password': password
        };
        client._request(url, 'POST', update, null, callback);
    };

    /**
     * Update the app administrator status for a user
     *
     * @param  {Number}             id                              The id of the user to update the app administrator status for
     * @param  {Boolean}            admin                           Whether the user should be an app administrator
     * @param  {Function}           callback                        Standard callback function
     * @param  {Object}             callback.err                    An error that occurred, if any
     * @param  {Object}             callback.body                   The JSON response from the REST API
     * @param  {Response}           callback.response               The response object as returned by requestjs
     * @see gh-user/lib/rest.js for more information
     */
    client.user.updateAdminStatus = function(id, admin, callback) {
        var url = '/api/users/' + client.util.encodeURIComponent(id) + '/admin';
        client._request(url, 'POST', {'admin': admin}, null, callback);
    };

    /**
     * Import a set of users
     *
     * @param  {Stream}             stream                          A stream that points to a CSV file
     * @param  {Number}             app                             The id of the application into which the users should be imported. Defaults to the current application
     * @param  {String}             authenticationStrategy          The authentication strategy for the user. One of `local` or `shibboleth`
     * @param  {Boolean}            [forceProfileUpdate]            Whether the user information should be updated, even when other user information is already present. Defaults to `false`
     * @param  {Function}           callback                        Standard callback function
     * @param  {Object}             callback.err                    An error that occurred, if any
     * @param  {Object}             callback.body                   The JSON response from the REST API
     * @param  {Response}           callback.response               The response object as returned by requestjs
     * @see gh-users/lib/rest.js for more information
     */
    client.user.importUsers = function(stream, app, authenticationStrategy, forceProfileUpdate, callback) {
        var url = '/api/users/import';
        var data = {
            'file': stream,
            'app': app,
            'authenticationStrategy': authenticationStrategy,
            'forceProfileUpdate': forceProfileUpdate
        };
        client._request(url, 'POST', data, null, callback);
    };

    /**
     * Reset a user's calendar token
     *
     * @param  {Number}         id                              The id of the user to reset the calendar token for
     * @param  {Function}       callback                        Standard callback function
     * @param  {Object}         callback.err                    An error that occurred, if any
     * @param  {Object}         callback.body                   The JSON response from the REST API
     * @param  {Response}       callback.response               The response object as returned by requestjs
     * @see gh-user/lib/rest.js for more information
     */
    client.user.resetUserCalendarToken = function(id, callback) {
        var url = '/api/users/' + client.util.encodeURIComponent(id) + '/token';
        client._request(url, 'POST', null, null, callback);
    };

    /**
     * Get the calendar for a user
     *
     * @param  {Number}         id                              The id of the user to get the calendar for
     * @param  {String}         start                           The timestamp (ISO 8601) from which to get the calendar for the user
     * @param  {String}         end                             The timestamp (ISO 8601) until which to get the calendar for the user
     * @param  {Function}       callback                        Standard callback function
     * @param  {Object}         callback.err                    An error that occurred, if any
     * @param  {Object}         callback.body                   The JSON response from the REST API
     * @param  {Response}       callback.response               The response object as returned by requestjs
     * @see gh-user/lib/rest.js for more information
     */
    client.user.getUserCalendar = function(id, start, end, callback) {
        var url = '/api/users/' + client.util.encodeURIComponent(id) + '/calendar';
        var data = {
            'start': start,
            'end': end
        };
        client._request(url, 'GET', data, null, callback);
    };

    /**
     * Get the calendar for a user in iCal
     *
     * @param  {Number}         id                              The id of the user to get the calendar for
     * @param  {String}         token                           The access control token
     * @param  {Function}       callback                        Standard callback function
     * @param  {Object}         callback.err                    An error that occurred, if any
     * @param  {Object}         callback.body                   The JSON response from the REST API
     * @param  {Response}       callback.response               The response object as returned by requestjs
     * @see gh-user/lib/rest.js for more information
     */
    client.user.getUserCalendarICal = function(id, token, callback) {
        var url = '/api/users/' + client.util.encodeURIComponent(id);
        url += '/' + client.util.encodeURIComponent(token) + '/calendar.ical';
        client._request(url, 'GET', null, null, callback);
    };

    /**
     * Get the calendar for a user in RSS
     *
     * @param  {Number}         id                              The id of the user to get the calendar for
     * @param  {String}         token                           The access control token
     * @param  {Function}       callback                        Standard callback function
     * @param  {Object}         callback.err                    An error that occurred, if any
     * @param  {Object}         callback.body                   The JSON response from the REST API
     * @param  {Response}       callback.response               The response object as returned by requestjs
     * @see gh-user/lib/rest.js for more information
     */
    client.user.getUserCalendarRss = function(id, token, callback) {
        var url = '/api/users/' + client.util.encodeURIComponent(id);
        url += '/' + client.util.encodeURIComponent(token) + '/calendar.rss';
        client._request(url, 'GET', null, null, callback);
    };
};
