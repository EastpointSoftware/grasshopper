/**
 * Copyright (c) 2015 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

module.exports = function(client) {
    client.admin = {};

    /**
     * Get a list of global administrators
     *
     * @param  {Object}             [opts]                  Optional properties
     * @param  {Number}             [opts.limit]            The maximum number of results to retrieve. Default: 10
     * @param  {Number}             [opts.offset]           The paging number of the results to retrieve
     * @param  {Function}           callback                Standard callback function
     * @param  {Object}             callback.err            An error that occurred, if any
     * @param  {GlobalAdminList}    callback.globalAdmins   The requested list of global administrators
     */
    client.admin.getGlobalAdmins = function(opts, callback) {
        client._request('/api/admins', 'GET', opts, null, callback);
    };

    /**
     * Get the me object of the current user
     *
     * @param  {Function}       callback        Standard callback function
     * @param  {Object}         callback.err    An error that occurred, if any
     * @param  {GlobalAdminMe}  callback.me     The me object of the current user
     */
    client.admin.getMe = function(callback) {
        client._request('/api/me', 'GET', null, null, callback);
    };

    /**
     * Create a new global administrator
     *
     * @param  {String}             username                The username for the global administrator
     * @param  {String}             password                The password for the global administrator
     * @param  {String}             displayName             The name of the global administrator
     * @param  {Function}           callback                Standard callback function
     * @param  {Object}             callback.err            An error that occurred, if any
     * @param  {GlobalAdmin}        callback.globalAdmin    The created global administrator
     */
    client.admin.createGlobalAdmin = function(username, password, displayName, callback) {
        var admin = {
            'username': username,
            'password': password,
            'displayName': displayName
        };
        client._request('/api/admins', 'POST', admin, null, callback);
    };

    /**
     * Update a global administrator
     *
     * @param  {Number}             id                          The id of the global administrator to update
     * @param  {String}             displayName                 Updated global administrator name
     * @param  {Function}           callback                    Standard callback function
     * @param  {Object}             callback.err                An error that occurred, if any
     * @param  {GlobalAdmin}        callback.globalAdmin        The updated global administrator
     */
    client.admin.updateGlobalAdmin = function(id, displayName, callback) {
        var url = '/api/admins/' + client.util.encodeURIComponent(id);
        var admin = {
            'displayName': displayName
        };
        client._request(url, 'POST', admin, null, callback);
    };

    /**
     * Change a global administrator's password
     *
     * @param  {Number}             id                          The id of the global administrator for which to change the password
     * @param  {String}             newPassword                 The new password for the global administrator
     * @param  {String}             password                    The password of the global administrator making the change
     * @param  {Function}           callback                    Standard callback function
     * @param  {Object}             callback.err                An error that occurred, if any
     */
    client.admin.changePassword = function(id, newPassword, password, callback) {
        var url = '/api/admins/' + client.util.encodeURIComponent(id) + '/password';
        var params = {
            'newPassword': newPassword,
            'password': password
        };
        client._request(url, 'POST', params, null, callback);
    };

    /**
     * Delete a global administrator
     *
     * @param  {Number}     id              The id of the global administrator to delete
     * @param  {Function}   callback        Standard callback function
     * @param  {Object}     callback.err    An error that occurred, if any
     */
    client.admin.deleteGlobalAdmin = function(id, callback) {
        var url = '/api/admins/' + client.util.encodeURIComponent(id);
        client._request(url, 'DELETE', null, null, callback);
    };
};
