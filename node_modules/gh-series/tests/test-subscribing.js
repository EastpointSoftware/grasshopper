/**
 * Copyright (c) 2015 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');
var assert = require('assert');
var moment = require('moment');

var EventsTestsUtil = require('gh-events/tests/util');
var OrgUnitTestsUtil = require('gh-orgunit/tests/util');
var TestsUtil = require('gh-tests');
var UsersTestsUtil = require('gh-users/tests/util');

var SeriesTestsUtil = require('./util');

describe('Series', function() {

    describe('Subscribing', function() {

        /**
         * Test that verifies that a user can subscribe to a serie
         */
        it('verify a user can subscribe to a serie', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 2, false, function(serieCreator, serieSubscriber) {

                // Generate a test serie with some events
                var calendarStart = moment().subtract(1, 'day').format();
                var calendarEnd = moment().add(30, 'day').format();
                SeriesTestsUtil.generateSerieWithEvents(serieCreator.client, 1, 10, calendarStart, calendarEnd, function(series) {
                    var serie = series[0];

                    // Subscribe to the serie
                    SeriesTestsUtil.assertSubscribeSeries(serieSubscriber.client, serie.id, serieSubscriber.profile.id, null, function() {
                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies validation when a user subscribes to a serie
         */
        it('verify validation when a user subscribes to a serie', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                // Generate a test serie
                SeriesTestsUtil.assertCreateSerie(simon.client, 'Test serie', {}, function(serie) {

                    // Invalid serie id
                    SeriesTestsUtil.assertSubscribeSeriesFails(simon.client, 'Not a number', simon.profile.id, null, 400, function() {

                        // Unknown serie id
                        SeriesTestsUtil.assertSubscribeSeriesFails(simon.client, -1, simon.profile.id, null, 404, function() {
                            SeriesTestsUtil.assertSubscribeSeriesFails(simon.client, 234234234234, simon.profile.id, null, 404, function() {

                                // Invalid user id
                                SeriesTestsUtil.assertSubscribeSeriesFails(simon.client, serie.id, 'Not a number', null, 400, function() {

                                    // Unknown user id
                                    SeriesTestsUtil.assertSubscribeSeriesFails(simon.client, serie.id, -1, null, 404, function() {
                                        SeriesTestsUtil.assertSubscribeSeriesFails(simon.client, serie.id, 234242423423, null, 404, function() {

                                            // Invalid context (orgunit) id
                                            SeriesTestsUtil.assertSubscribeSeriesFails(simon.client, serie.id, simon.profile.id, 'Not a number', 400, function() {

                                                // Unknown context (orgunit) id
                                                SeriesTestsUtil.assertSubscribeSeriesFails(simon.client, serie.id, simon.profile.id, -1, 404, function() {
                                                    SeriesTestsUtil.assertSubscribeSeriesFails(simon.client, serie.id, simon.profile.id, 342234234, 404, function() {
                                                        return callback();
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies authorization when a user subscribes to a serie
         */
        it('verify authorization when a user subscribes to a serie', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 2, false, function(camUser, anotherCamUser) {
                TestsUtil.generateTestUsers(global.tests.apps.oxford2014, 1, false, function(oxfordUser) {

                    OrgUnitTestsUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Orgunit', 'course', null, function(camOrgUnit) {
                        OrgUnitTestsUtil.assertCreateOrgUnit(global.tests.admins.oxford2014.client, 'Orgunit', 'course', null, function(oxfordOrgUnit) {

                            // Generate a test serie with some events on the cambridge app
                            var calendarStart = moment().subtract(1, 'day').format();
                            var calendarEnd = moment().add(30, 'day').format();
                            SeriesTestsUtil.generateSerieWithEvents(camUser.client, 3, 10, calendarStart, calendarEnd, function(series) {
                                var serie = series[0];

                                // Anonymous users cannot subscribe to a serie
                                TestsUtil.getAnonymousAppUserClient(global.tests.apps.cam2013, function(anonymousClient) {
                                    SeriesTestsUtil.assertSubscribeSeriesFails(anonymousClient, serie.id, camUser.profile.id, null, 401, function() {

                                        // Users cannot subscribe to a serie with a context to which the serie does not belong
                                        SeriesTestsUtil.assertSubscribeSeriesFails(camUser.client, serie.id, camUser.profile.id, camOrgUnit.id, 400, function() {

                                            // Users cannot subscribe to a serie from another app
                                            SeriesTestsUtil.assertSubscribeSeriesFails(oxfordUser.client, serie.id, oxfordUser.profile.id, null, 401, function() {

                                                // Users cannot subscribe to a serie from their own app with an organisational unit from another
                                                SeriesTestsUtil.assertSubscribeSeriesFails(camUser.client, serie.id, camUser.profile.id, oxfordOrgUnit.id, 401, function() {

                                                    // Users cannot subscribe other users
                                                    SeriesTestsUtil.assertSubscribeSeriesFails(camUser.client, serie.id, anotherCamUser.profile.id, null, 401, function() {
                                                        SeriesTestsUtil.assertSubscribeSeriesFails(camUser.client, serie.id, oxfordUser.profile.id, null, 401, function() {

                                                            // App admins can subscribe users
                                                            SeriesTestsUtil.assertSubscribeSeries(global.tests.admins.cam2013.client, series[1].id, camUser.profile.id, null, function() {

                                                                // App admins cannot subscribe users from other applications
                                                                SeriesTestsUtil.assertSubscribeSeriesFails(global.tests.admins.cam2013.client, series[1].id, oxfordUser.profile.id, null, 401, function() {

                                                                    // Global admins can subscribe users
                                                                    TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                                                                        SeriesTestsUtil.assertSubscribeSeries(globalAdminClient, series[2].id, camUser.profile.id, null, function() {
                                                                            return callback();
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that the user is defaulted to the current user when subscribing to a serie
         */
        it('verify the user is defaulted to the current user when subscribing to a serie', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 2, false, function(serieCreator, serieSubscriber) {

                // Generate a test serie with some events
                var calendarStart = moment().subtract(1, 'day').format();
                var calendarEnd = moment().add(30, 'day').format();
                SeriesTestsUtil.generateSerieWithEvents(serieCreator.client, 1, 10, calendarStart, calendarEnd, function(series) {
                    var serie = series[0];

                    // Subscribe to the serie, but don't specify a user
                    SeriesTestsUtil.assertSubscribeSeries(serieSubscriber.client, serie.id, null, null, function() {
                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies that a user can subscribe to a serie without any events
         */
        it('verify a user can subscribe to a serie without any events', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 2, false, function(serieCreator, serieSubscriber) {

                // Generate a test serie
                SeriesTestsUtil.assertCreateSerie(serieCreator.client, 'Test serie', {}, function(serie) {

                    // Subscribe to the serie
                    SeriesTestsUtil.assertSubscribeSeries(serieSubscriber.client, serie.id, serieSubscriber.profile.id, null, function() {
                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies that a user can subscribe to the same serie twice
         */
        it('verify a user can subscribe to the same serie twice', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                // Generate an organisational unit structure that holds some series
                OrgUnitTestsUtil.createSimpleTree(global.tests.admins.cam2013.client, function(courseUnit, subjectUnit, partUnit, moduleUnit, series) {

                    // Subscribe to the module
                    OrgUnitTestsUtil.assertSubscribeOrgUnit(simon.client, moduleUnit.id, null, function() {

                        // Although subscribing to the serie should have no impact, the endpoint should not return an error
                        SeriesTestsUtil.assertSubscribeSeries(simon.client, series[0].id, simon.profile.id, null, function() {
                            return callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that calendars are updated when an event gets added or removed from a serie
         */
        it('verify calendars are updated when an event gets added to or removed from a serie', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 2, false, function(serieCreator, serieSubscriber) {

                // Generate a test serie
                SeriesTestsUtil.assertCreateSerie(serieCreator.client, 'Test serie', {}, function(serie) {

                    // Subscribe to the serie
                    SeriesTestsUtil.assertSubscribeSeries(serieSubscriber.client, serie.id, serieSubscriber.profile.id, null, function() {

                        // Add an event to the serie
                        var start = moment().format();
                        var end = moment().add(2, 'hour').format();
                        EventsTestsUtil.assertCreateEvent(serieCreator.client, 'Test event', start, end, null, function(event) {
                            SeriesTestsUtil.assertAddSeriesEvents(serieCreator.client, serie.id, [event.id], function() {

                                // Ensure the calendar contains the event
                                UsersTestsUtil.assertGetUserCalendar(serieSubscriber.client, serieSubscriber.profile.id, start, end, [event], function() {

                                    // Remove the event from the serie
                                    SeriesTestsUtil.assertDeleteSeriesEvents(serieCreator.client, serie.id, [event.id], function() {

                                        // Ensure the calendar no longer contains the event
                                        UsersTestsUtil.assertGetUserCalendar(serieSubscriber.client, serieSubscriber.profile.id, start, end, [], function(calendar) {
                                            assert.strictEqual(calendar.results.length, 0);
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that calendars are updated when an event gets deleted from the system
         */
        it('verify calendars are updated when an event gets deleted from the system', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 2, false, function(serieCreator, serieSubscriber) {

                // Generate a test serie
                SeriesTestsUtil.assertCreateSerie(serieCreator.client, 'Test serie', {}, function(serie) {

                    // Subscribe to the serie
                    SeriesTestsUtil.assertSubscribeSeries(serieSubscriber.client, serie.id, serieSubscriber.profile.id, null, function() {

                        // Add 2 events to the serie
                        var start = moment().format();
                        var end = moment().add(2, 'hour').format();
                        EventsTestsUtil.generateTestEvents(serieCreator.client, 2, start, end, function(events) {
                            SeriesTestsUtil.assertAddSeriesEvents(serieCreator.client, serie.id, _.pluck(events, 'id'), function() {

                                // Ensure the calendar contains the events
                                var calendarStart = moment().subtract(1, 'day').format();
                                var calendarEnd = moment().add(4, 'day').format();
                                UsersTestsUtil.assertGetUserCalendar(serieSubscriber.client, serieSubscriber.profile.id, calendarStart, calendarEnd, events, function() {

                                    // Delete the first event from the system
                                    EventsTestsUtil.assertDeleteEvent(serieCreator.client, events[0].id, function() {

                                        // Ensure the calendar only contains the second
                                        UsersTestsUtil.assertGetUserCalendar(serieSubscriber.client, serieSubscriber.profile.id, calendarStart, calendarEnd, [events[1]], function(calendar) {
                                            assert.strictEqual(calendar.results.length, 1);
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that a context can be specified
         */
        it('verify a context can be specified', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                // Generate 2 organisational units and add the same serie to both of them
                OrgUnitTestsUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Orgunit 1', 'course', null, function(orgUnit1) {
                    OrgUnitTestsUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Orgunit 2', 'course', null, function(orgUnit2) {
                        var calendarStart = moment().subtract(1, 'day').format();
                        var calendarEnd = moment().add(30, 'day').format();
                        SeriesTestsUtil.generateSerieWithEvents(global.tests.admins.cam2013.client, 1, 5, calendarStart, calendarEnd, function(series) {
                            var serie = series[0];
                            OrgUnitTestsUtil.assertAddOrgUnitSeries(global.tests.admins.cam2013.client, orgUnit1.id, [serie.id], function() {
                                OrgUnitTestsUtil.assertAddOrgUnitSeries(global.tests.admins.cam2013.client, orgUnit2.id, [serie.id], function() {

                                    // Subscribe to the serie and specify we did it in the context
                                    // of the first organisational unit
                                    SeriesTestsUtil.assertSubscribeSeries(simon.client, serie.id, simon.profile.id, orgUnit1.id, function() {

                                        // Verify the context returns when retrieving the user calendar
                                        UsersTestsUtil.assertGetUserCalendar(simon.client, simon.profile.id, calendarStart, calendarEnd, null, function(calendar) {
                                            _.each(calendar.results, function(event) {
                                                assert.ok(event.context);
                                                assert.strictEqual(event.context.id, orgUnit1.id);
                                            });

                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Unsubscribing', function() {

        /**
         * Test that verifies that a user can subscribe from a serie
         */
        it('verify a user can unsubscribe from a serie', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 2, false, function(serieCreator, serieSubscriber) {

                // Generate a test serie with some events
                var calendarStart = moment().subtract(1, 'day').format();
                var calendarEnd = moment().add(30, 'day').format();
                SeriesTestsUtil.generateSerieWithEvents(serieCreator.client, 1, 10, calendarStart, calendarEnd, function(series) {
                    var serie = series[0];

                    // Subscribe to the serie
                    SeriesTestsUtil.assertSubscribeSeries(serieSubscriber.client, serie.id, serieSubscriber.profile.id, null, function() {

                        // Unsubscribe from the serie
                        SeriesTestsUtil.assertUnsubscribeSeries(serieSubscriber.client, serie.id, serieSubscriber.profile.id, function() {
                            return callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies validation when a user unsubscribes from a serie
         */
        it('verify validation when a user unsubscribes from a serie', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                // Generate a test serie
                SeriesTestsUtil.assertCreateSerie(simon.client, 'Test serie', {}, function(serie) {

                    // Invalid serie id
                    SeriesTestsUtil.assertUnsubscribeSeriesFails(simon.client, 'Not a number', simon.profile.id, 400, function() {

                        // Unknown serie id
                        SeriesTestsUtil.assertUnsubscribeSeriesFails(simon.client, -1, simon.profile.id, 404, function() {
                            SeriesTestsUtil.assertUnsubscribeSeriesFails(simon.client, 234234234234, simon.profile.id, 404, function() {

                                // Invalid user id
                                SeriesTestsUtil.assertUnsubscribeSeriesFails(simon.client, serie.id, 'Not a number', 400, function() {

                                    // Unknown user id
                                    SeriesTestsUtil.assertUnsubscribeSeriesFails(simon.client, serie.id, -1, 404, function() {
                                        SeriesTestsUtil.assertUnsubscribeSeriesFails(simon.client, serie.id, 234234234234, 404, function() {
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies authorization when a user unsubscribes from a serie
         */
        it('verify authorization when a user unsubscribes from a serie', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 2, false, function(camUser, anotherCamUser) {
                TestsUtil.generateTestUsers(global.tests.apps.oxford2014, 1, false, function(oxfordUser) {

                    // Generate some test series with some events on the cambridge app
                    var calendarStart = moment().subtract(1, 'day').format();
                    var calendarEnd = moment().add(30, 'day').format();
                    SeriesTestsUtil.generateSerieWithEvents(camUser.client, 3, 10, calendarStart, calendarEnd, function(series) {

                        // Subscribe to all the series
                        SeriesTestsUtil.assertSubscribeSeries(camUser.client, series[0].id, camUser.profile.id, null, function() {
                            SeriesTestsUtil.assertSubscribeSeries(camUser.client, series[1].id, camUser.profile.id, null, function() {
                                SeriesTestsUtil.assertSubscribeSeries(camUser.client, series[2].id, camUser.profile.id, null, function() {

                                    // Anonymous users cannot unsubscribe from a serie
                                    TestsUtil.getAnonymousAppUserClient(global.tests.apps.cam2013, function(anonymousClient) {
                                        SeriesTestsUtil.assertUnsubscribeSeriesFails(anonymousClient, series[0].id, camUser.profile.id, 401, function() {

                                            // Users cannot unsubscribe other users
                                            SeriesTestsUtil.assertSubscribeSeriesFails(anotherCamUser.client, series[0].id, camUser.profile.id, null, 401, function() {

                                                // Users cannot unsubscribe other users from other applications
                                                SeriesTestsUtil.assertSubscribeSeriesFails(oxfordUser.client, series[0].id, camUser.profile.id, null, 401, function() {

                                                    // Users can unsubscribe themselves
                                                    SeriesTestsUtil.assertUnsubscribeSeries(camUser.client, series[0].id, camUser.profile.id, function() {

                                                        // App admins can unsubscribe users
                                                        SeriesTestsUtil.assertUnsubscribeSeries(global.tests.admins.cam2013.client, series[1].id, camUser.profile.id, function() {

                                                            // App admins cannot unsubscribe users from other applications
                                                            SeriesTestsUtil.assertUnsubscribeSeriesFails(global.tests.admins.cam2013.client, series[1].id, oxfordUser.profile.id, 401, function() {

                                                                // Global admins can unsubscribe users
                                                                TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                                                                    SeriesTestsUtil.assertUnsubscribeSeries(globalAdminClient, series[2].id, camUser.profile.id, function() {
                                                                        return callback();
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that the user is defaulted to the current user when unsubscribing from a serie
         */
        it('verify the user is defaulted to the current user when unsubscribing from a serie', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 2, false, function(serieCreator, serieSubscriber) {

                // Generate a test serie with some events
                var calendarStart = moment().subtract(1, 'day').format();
                var calendarEnd = moment().add(30, 'day').format();
                SeriesTestsUtil.generateSerieWithEvents(serieCreator.client, 1, 10, calendarStart, calendarEnd, function(series) {
                    var serie = series[0];

                    // Subscribe to the serie, but don't specify a user
                    SeriesTestsUtil.assertSubscribeSeries(serieSubscriber.client, serie.id, null, null, function() {

                        // Unsubscribe from the serie, but don't specify a user
                        SeriesTestsUtil.assertUnsubscribeSeries(serieSubscriber.client, serie.id, null, function() {
                            return callback();
                        });
                    });
                });
            });
        });
    });
});
