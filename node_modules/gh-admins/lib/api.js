/**
 * Copyright (c) 2015 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var AuthUtil = require('gh-auth/lib/util');
var GrasshopperUtil = require('gh-core/lib/util');
var log = require('gh-core/lib/logger').logger('gh-users');
var Validator = require('gh-core/lib/validator').Validator;

var AdminsDAO = require('./internal/dao');

/**
 * Get all global administrators
 *
 * @param  {Context}            ctx                         Standard context containing the current user and the current app
 * @param  {Number}             [limit]                     The maximum number of results to retrieve. Default: 10
 * @param  {Number}             [offset]                    The paging number of the results to retrieve
 * @param  {Function}           callback                    Standard callback function
 * @param  {Object}             callback.err                An error object, if any
 * @param  {GlobalAdminList}    callback.globalAdmins       All available global administrators
 */
var getGlobalAdmins = module.exports.getGlobalAdmins = function(ctx, limit, offset, callback) {
    // Ensure that the paging values are valid
    limit = GrasshopperUtil.getNumberParam(limit, 10, 1, 25);
    offset = GrasshopperUtil.getNumberParam(offset, 0, 0);

    // Validation
    var validator = new Validator();
    validator.check(null, {'code': 401, 'msg': 'Only global administrators can get all global administrators'}).isGlobalAdmin(ctx);
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    return AdminsDAO.getGlobalAdmins(limit, offset, callback);
};

/**
 * Get a global administrator
 *
 * @param  {Context}            ctx                         Standard context containing the current user and the current app
 * @param  {Number}             id                          The id of the global administrator to retrieve
 * @param  {Function}           callback                    Standard callback function
 * @param  {Object}             callback.err                An error object, if any
 * @param  {GlobalAdmin}        callback.globalAdmin        The requested global administrator
 */
var getGlobalAdmin = module.exports.getGlobalAdmin = function(ctx, id, callback) {
    // Ensure that the global administrator id is a valid number
    id = GrasshopperUtil.getNumberParam(id);

    // Validation
    var validator = new Validator();
    validator.check(null, {'code': 401, 'msg': 'Only global administrators can get a global administrator'}).isGlobalAdmin(ctx);
    validator.check(id, {'code': 400, 'msg': 'A valid global administrator id must be provided'}).isInt();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    return AdminsDAO.getGlobalAdmin(id, callback);
};

/**
 * Get a global administrator by username
 *
 * @param  {Context}            ctx                         Standard context containing the current user and the current app
 * @param  {String}             username                    The username of the global administrator to retrieve
 * @param  {Function}           callback                    Standard callback function
 * @param  {Object}             callback.err                An error object, if any
 * @param  {GlobalAdmin}        callback.globalAdmin        The requested global administrator
 */
var getGlobalAdminByUsername = module.exports.getGlobalAdminByUsername = function(ctx, username, callback) {
    // Validation
    var validator = new Validator();
    validator.check(null, {'code': 401, 'msg': 'Only global administrators can get a global administrator by username'}).isGlobalAdmin(ctx);
    validator.check(username, {'code': 400, 'msg': 'A username must be provided'}).notEmpty();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    return AdminsDAO.getGlobalAdminByUsername(username, callback);
};

/**
 * Create a new global administrator
 *
 * @param  {Context}            ctx                         Standard context containing the current user and the current app
 * @param  {String}             username                    The username for the global administrator
 * @param  {String}             password                    The password for the global administrator
 * @param  {String}             displayName                 The name of the global administrator
 * @param  {Function}           callback                    Standard callback function
 * @param  {Object}             callback.err                An error object, if any
 * @param  {GlobalAdmin}        callback.globalAdmin        The created global administrator
 */
var createGlobalAdmin = module.exports.createGlobalAdmin = function(ctx, username, password, displayName, callback) {
    var validator = new Validator();
    validator.check(null, {'code': 401, 'msg': 'Only global administrators can get a global administrator by username'}).isGlobalAdmin(ctx);
    validator.check(username, {'code': 400, 'msg': 'A username must be provided'}).notEmpty();
    validator.check(password, {'code': 400, 'msg': 'A password must be provided'}).notEmpty();
    validator.check(password, {'code': 400, 'msg': 'A valid password that is 6 characters or longer must be provided'}).len(6);
    validator.check(displayName, {'code': 400, 'msg': 'A display name must be provided'}).notEmpty();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    // Ensure that a global administrator with the provided username doesn't already exist
    getGlobalAdminByUsername(ctx, username, function(err, globalAdmin) {
        if (err && err.code !== 404) {
            return callback(err);
        } else if (globalAdmin) {
            return callback({'code': 400, 'msg': 'A global administrator with the provided username already exists'});
        }

        return AdminsDAO.createGlobalAdmin(username, password, displayName, callback);
    });
};

/**
 * Update a global administrator
 *
 * @param  {Context}            ctx                         Standard context containing the current user and the current app
 * @param  {Number}             id                          The id of the global administrator to update
 * @param  {String}             displayName                 Updated global administrator name
 * @param  {Function}           callback                    Standard callback function
 * @param  {Object}             callback.err                An error object, if any
 * @param  {GlobalAdmin}        callback.globalAdmin        The updated global administrator
 */
var updateGlobalAdmin = module.exports.updateGlobalAdmin = function(ctx, id, displayName, callback) {
    // Ensure the global administrator id is a valid number
    id = GrasshopperUtil.getNumberParam(id);

    // Validation
    var validator = new Validator();
    validator.check(null, {'code': 401, 'msg': 'Only global administrators can update a global administrator'}).isGlobalAdmin(ctx);
    validator.check(id, {'code': 400, 'msg': 'A valid global administrator id must be provided'}).isInt();
    validator.check(displayName, {'code': 400, 'msg': 'A display name must be provided for update'}).notEmpty();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    // Verify that the provided global administrator exists
    getGlobalAdmin(ctx, id, function(err, globalAdmin) {
        if (err) {
            return callback(err);
        }

        return AdminsDAO.updateGlobalAdmin(globalAdmin, displayName, callback);
    });
};

/**
 * Change a global administrator's password. The administator making the change will have to provide
 * their own password. This is done to thwart situations where an administrator's session gets hijacked
 *
 * @param  {Context}        ctx                     Standard context containing the current user and the current app
 * @param  {String}         id                      The id of the global administrator for which to change the password
 * @param  {String}         newPassword             The new password for the global administrator
 * @param  {String}         password                The password of the global administrator making the change
 * @param  {Function}       callback                Standard callback function
 * @param  {Object}         callback.err            An error that occurred, if any
 */
var changePassword = module.exports.changePassword = function(ctx, id, newPassword, password, callback) {
    // Ensure the global administrator id is a valid number
    id = GrasshopperUtil.getNumberParam(id);

    // Validation
    var validator = new Validator();
    validator.check(null, {'code': 401, 'msg': 'Only global administrators can change the password of a global administrator'}).isGlobalAdmin(ctx);
    validator.check(id, {'code': 400, 'msg': 'A valid global administrator id must be provided'}).isInt();
    validator.check(newPassword, {'code': 400, 'msg': 'A valid new password must be provided'}).notEmpty();
    validator.check(newPassword, {'code': 400, 'msg': 'A valid new password that is 6 characters or longer must be provided'}).len(6);
    validator.check(password, {'code': 400, 'msg': 'A valid password must be provided'}).notEmpty();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    // Ensure the global administrator that is making the change specified their own password
    if (!AuthUtil.comparePassword(password, ctx.user.password)) {
        return callback({'code': 401, 'msg': 'An incorrect password was provided'});
    }

    // Verify that the provided global administrator exists
    getGlobalAdmin(ctx, id, function(err, globalAdmin) {
        if (err) {
            return callback(err);
        }

        AdminsDAO.changePassword(globalAdmin, newPassword, function(err) {
            if (err) {
                return callback(err);
            }

            log().info({
                'actor': ctx.user,
                'globalAdmin': globalAdmin
            }, 'Updated the password of a global administrator');

            return callback();
        });
    });
};

/**
 * Delete a global administrator
 *
 * @param  {Context}    ctx             Standard context containing the current user and the current app
 * @param  {Number}     id              The id of the global administrator to delete
 * @param  {Function}   callback        Standard callback function
 * @param  {Object}     callback.err    An error that occurred, if any
 */
var deleteGlobalAdmin = module.exports.deleteGlobalAdmin = function(ctx, id, callback) {
    // Ensure the global administrator id is a valid number
    id = GrasshopperUtil.getNumberParam(id);

    var validator = new Validator();
    validator.check(null, {'code': 401, 'msg': 'Only global administrators can update a global administrator'}).isGlobalAdmin(ctx);
    validator.check(id, {'code': 400, 'msg': 'A valid global administrator id must be provided'}).isInt();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    // Ensure we do not leave the system without a global admin
    AdminsDAO.getGlobalAdmins(1, 0, function(err, globalAdmins) {
        if (err) {
            return callback(err);
        } else if (globalAdmins.count < 2) {
            return callback({'code': 400, 'msg': 'Deleting this global administrator would leave no global admins in the system'});
        }

        // Get the global admin being deleted, ensuring they exist
        AdminsDAO.getGlobalAdmin(id, function(err, globalAdmin) {
            if (err) {
                return callback(err);
            }

            // Finally delete the global admin
            return AdminsDAO.deleteGlobalAdmin(globalAdmin, callback);
        });
    });
};

/**
 * TODO
 */
var updateGlobalAdminPassword = module.exports.updateGlobalAdminPassword = function(ctx, globalAdmin, password, callback) {

};
