/**
 * Copyright (c) 2015 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var AuthUtil = require('gh-auth/lib/util');
var DB = require('gh-core/lib/db');
var log = require('gh-core/lib/logger').logger('gh-users');

/**
 * Get all global administrators
 *
 * @param  {Number}             limit                       The maximum number of results to retrieve
 * @param  {Number}             offset                      The paging number of the results to retrieve
 * @param  {Function}           callback                    Standard callback function
 * @param  {Object}             callback.err                An error that occurred, if any
 * @param  {GlobalAdminList}    callback.globalAdmins       All available global administrators
 */
var getGlobalAdmins = module.exports.getGlobalAdmins = function(limit, offset, callback) {
    DB.GlobalAdmin.findAndCountAll({'limit': limit, 'offset': offset}).complete(function(err, globalAdmins) {
        if (err) {
            log().error({'err': err}, 'Failed to get the global administrators');
            return callback({'code': 500, 'msg': err.message});
        }

        return callback(null, globalAdmins);
    });
};

/**
 * Get a global administrator
 *
 * @param  {Number}             id                          The id of the global administrator to retrieve
 * @param  {Function}           callback                    Standard callback function
 * @param  {Object}             callback.err                An error that occurred, if any
 * @param  {GlobalAdmin}        callback.globalAdmin        The requested global administrator
 */
var getGlobalAdmin = module.exports.getGlobalAdmin = function(id, callback) {
    DB.GlobalAdmin.findById(id).complete(function(err, globalAdmin) {
        if (err) {
            log().error({'err': err, 'id': id}, 'Failed to get a global administrator');
            return callback({'code': 500, 'msg': err.message});
        } else if (!globalAdmin) {
            log().debug({'err': err, 'id': id}, 'A global administrator with the specified id could not be found');
            return callback({'code': 404, 'msg': 'A global administrator with the specified id could not be found'});
        }

        return callback(null, globalAdmin);
    });
};

/**
 * Get a global administrator by username
 *
 * @param  {String}             username                    The username of the global administrator to retrieve
 * @param  {Function}           callback                    Standard callback function
 * @param  {Object}             callback.err                An error that occurred, if any
 * @param  {GlobalAdmin}        callback.globalAdmin        The requested global administrator
 */
var getGlobalAdminByUsername = module.exports.getGlobalAdminByUsername = function(username, callback) {
    DB.GlobalAdmin.findOne({'where': {'username': username}}).complete(function(err, globalAdmin) {
        if (err) {
            log().error({'err': err, 'username': username}, 'Failed to get a global administrator by username');
            return callback({'code': 500, 'msg': err.message});
        } else if (!globalAdmin) {
            log().debug({'err': err, 'username': username}, 'A global administrator with the specified username could not be found');
            return callback({'code': 404, 'msg': 'A global administrator with the specified username could not be found'});
        }

        return callback(null, globalAdmin);
    });
};

/**
 * Create a new global administrator
 *
 * @param  {String}             username                    The username for the global administrator
 * @param  {String}             password                    The password for the global administrator
 * @param  {String}             displayName                 The name of the global administrator
 * @param  {Function}           callback                    Standard callback function
 * @param  {Object}             callback.err                An error that occurred, if any
 * @param  {GlobalAdmin}        callback.globalAdmin        The created global administrator
 */
var createGlobalAdmin = module.exports.createGlobalAdmin = function(username, password, displayName, callback) {
    // Hash the provided password
    var hashedPassword = AuthUtil.hashPassword(password);

    // Persist the global admin
    var globalAdmin = {
        'username': username,
        'password': hashedPassword,
        'displayName': displayName
    };
    DB.GlobalAdmin.create(globalAdmin).complete(function(err, globalAdmin) {
        if (err) {
            log().error({'err': err}, 'Failed to create a new global administrator');
            return callback({'code': 500, 'msg': err.message});
        }

        log().debug({'globalAdmin': globalAdmin}, 'Created a new global administrator');
        return callback(null, globalAdmin);
    });
};

/**
 * Update a global administrator
 *
 * @param  {GlobalAdmin}        globalAdmin                 The global administrator to update
 * @param  {String}             displayName                 Updated global administrator name
 * @param  {Function}           callback                    Standard callback function
 * @param  {Object}             callback.err                An error that occurred, if any
 * @param  {GlobalAdmin}        callback.globalAdmin        The updated global administrator
 */
var updateGlobalAdmin = module.exports.updateGlobalAdmin = function(globalAdmin, displayName, callback) {
    var update = {
        'displayName': displayName
    };

    globalAdmin.updateAttributes(update).complete(function(err, globalAdmin) {
        if (err) {
            log().error({'err': err}, 'Failed to update a global administrator');
            return callback({'code': 500, 'msg': err.message});
        }

        log().debug({'globalAdmin': globalAdmin, 'update': update}, 'Updated a global administrator');
        return callback(null, globalAdmin);
    });
};

/**
 * Change a global administrator's password
 *
 * @param  {GlobalAdmin}        globalAdmin                 The global administrator whose password should be changed
 * @param  {String}             password                    The new password for the global administrator
 * @param  {Function}           callback                    Standard callback function
 * @param  {Object}             callback.err                An error that occurred, if any
 */
var changePassword = module.exports.changePassword = function(globalAdmin, password, callback) {
    var update = {
        'password': AuthUtil.hashPassword(password)
    };

    globalAdmin.updateAttributes(update).complete(function(err, globalAdmin) {
        if (err) {
            log().error({'err': err}, 'Failed to update the password of a global administrator');
            return callback({'code': 500, 'msg': err.message});
        }

        return callback();
    });
};

/**
 * Delete a global administrator
 *
 * @param  {GlobalAdmin}    globalAdmin     The global administrator to delete
 * @param  {Function}       callback        Standard callback function
 * @param  {Object}         callback.err    An error that occurred, if any
 */
var deleteGlobalAdmin = module.exports.deleteGlobalAdmin = function(globalAdmin, callback) {
    globalAdmin.destroy().complete(function(err) {
        if (err) {
            log().error({'err': err}, 'Failed to delete a global administrator');
            return callback({'code': 500, 'msg': err.message});
        }

        log().debug({'globalAdmin': globalAdmin}, 'Deleted a global administrator');
        return callback();
    });
};

/**
 * TODO
 */
var updateGlobalAdminPassword = module.exports.updateGlobalAdminPassword = function(globalAdmin, password, callback) {
};
