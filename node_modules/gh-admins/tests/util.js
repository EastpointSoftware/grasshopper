/**
 * Copyright (c) 2015 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');
var assert = require('assert');
var util = require('util');

var AuthTestsUtil = require('gh-auth/tests/util');
var TestsUtil = require('gh-tests/lib/util');

/**
 * Ensure the global admin passes all provided assertions
 *
 * @see TestsUtil#createAssertionFunction for more information
 *
 * @param  {GlobalAdmin}    globalAdmin     The global admin on which to perform assertions
 * @param  {Object}         assertions      An object specifying the assertions to perform
 * @throws {AssertionError}                 Thrown if any of the specified assertions fail
 */
var assertGlobalAdmin = module.exports.assertGlobalAdmin = TestsUtil.createAssertionFunction();

/**
 * Ensure the me feed passes all provided assertions
 *
 * @see TestsUtil#createAssertionFunction for more information
 *
 * @param  {Me}             me          The global admin on which to perform assertions
 * @param  {Object}         assertions  An object specifying the assertions to perform
 * @throws {AssertionError}             Thrown if any of the specified assertions fail
 */
var assertMe = module.exports.assertMe = TestsUtil.createAssertionFunction({
    /*!
     * Ensure that the Me feed has the expected authentication state
     *
     * @param  {Me}             actual      The Me feed to test
     * @param  {GlobalAdmin}    expected    If `falsey`, will ensure the me feed is anonymous. If a global admin, will ensure the me feed indicates it is authenticated as the provided admin
     */
    'authenticated': function(actual, globalAdmin) {
        // Extend the 'match' assertion to ensure the me feed is anonymous in the falsey case
        if (!globalAdmin) {
            assertMe(actual, {'match': {'anon': true}});
        } else {
            assertMe(actual, {'match': _.pick(globalAdmin, 'id', 'displayName', 'username')});
        }
    }
});

/**
 * Get a global administrator by their id
 *
 * @param  {RestClient}     client                  The REST client to make the request with
 * @param  {Object}         id                      The id of the global administrator to retrieve
 * @param  {Function}       callback                Invoked when the global administrator has been retrieved
 * @param  {GlobalAdmin}    callback.globalAdmin    The global administrator
 * @throws {AssertionError}                             Thrown if any request or assertions fail
 */
var assertGetGlobalAdmin = module.exports.assertGetGlobalAdmin = function(client, id, callback) {
    // There's no dedicated REST endpoint to get a global administrator by their id. We fetch
    // all the global administrators and filter the list locally
    assertGetAllGlobalAdmins(client, null, function(globalAdmins) {
        var globalAdmin = _.findWhere(globalAdmins, {'id': id});

        // Ensure the returned global administrator has the expected properties
        assertGlobalAdmin(globalAdmin, {
            'match': {
                'id': id
            },
            'missing': ['password']
        });
        return callback(globalAdmin);
    });
};

/**
 * Get all global admins available. This automatically pages through the global admins if there are
 * more than expected on the first page
 *
 * @param  {RestClient}         client                  The REST client to make the request with
 * @param  {Object}             opts                    Optional arguments
 * @param  {Number}             opts.batchSize          The size of batches for the paging requests
 * @param  {Function}           callback                Invoked when all global admins have been fetched
 * @param  {GlobalAdmin[]}      callback.globalAdmins   All global admins in the system
 * @param  {GlobalAdminList[]}  callback.responses      All global admin list responses that were fetched to build the resulting list
 * @throws {AssertionError}                             Thrown if any request or assertions fail
 */
var assertGetAllGlobalAdmins = module.exports.assertGetAllGlobalAdmins = function(client, opts, callback, _allGlobalAdmins, _allResponses, _offset) {
    _allGlobalAdmins = _allGlobalAdmins || [];
    _allResponses = _allResponses || [];
    _offset = _offset || 0;

    opts = opts || {};
    opts = _.defaults(opts, {'batchSize': 50});

    // Get the next page of global admins
    var requestOpts = {'limit': opts.batchSize, 'offset': _offset};
    assertGetGlobalAdmins(client, requestOpts, function(response) {
        _allGlobalAdmins = _.union(_allGlobalAdmins, response.rows);
        _allResponses.push(response);
        if (response.rows.length < opts.batchSize) {
            return callback(_allGlobalAdmins, _allResponses);
        }

        return assertGetAllGlobalAdmins(client, opts, callback, _allGlobalAdmins, _allResponses, _offset + opts.batchSize);
    });
};

/**
 * Get a page of global admins in the system, ensuring that it passes basic assertions about the
 * result
 *
 * @param  {RestClient}         client              The REST client to make the request with
 * @param  {Object}             [opts]              Optional parameters
 * @param  {Number}             [opts.limit]        The maximum number of items to return
 * @param  {Number}             [opts.offset]       The offset at which to start returning items
 * @param  {Function}           callback            Invoked when the global admins have been fetched and validated
 * @param  {GlobalAdminList}    callback.response   The global admin list response
 * @throws {AssertionError}                         Thrown if any request or assertions fail
 */
var assertGetGlobalAdmins = module.exports.assertGetGlobalAdmins = function(client, opts, callback) {
    client.admin.getGlobalAdmins(opts, function(err, response) {
        assert.ok(!err);
        assert.ok(response);
        assert.ok(_.isNumber(response.count));

        if (opts.limit) {
            assert.ok(opts.limit >= response.rows.length);
        }

        assert.ok(response.count >= response.rows.length);
        return callback(response);
    });
};

/**
 * Attempt to get a page of global admins in the system, ensuring that the request fails in the
 * specified manner
 *
 * @param  {RestClient}         client              The REST client to make the request with
 * @param  {Object}             [opts]              Optional parameters
 * @param  {Number}             [opts.limit]        The maximum number of items to return
 * @param  {Number}             [opts.offset]       The offset at which to start returning items
 * @param  {Number}             code                The expected HTTP response code of the request
 * @param  {Function}           callback            Invoked when the request has failed in the expected manner
 * @throws {AssertionError}                         Thrown if any request or assertions fail
 */
var assertGetGlobalAdminsFails = module.exports.assertGetGlobalAdminsFails = function(client, opts, code, callback) {
    client.admin.getGlobalAdmins(opts, function(err, response) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        assert.ok(!response);
        return callback();
    });
};

/**
 * Create a global administrator, ensuring the user is created as expected
 *
 * @param  {RestClient}     client                  The REST client to make the request with
 * @param  {String}         username                The username of the global administrator
 * @param  {String}         password                The password of the global administrator
 * @param  {String}         displayName             The display name of the global administrator
 * @param  {Function}       callback                Invoked when the global admin is successfully created
 * @param  {Object}         callback.err            An error that occurred, if any
 * @param  {GlobalAdmin}    callback.globalAdmin    The global admin that was created
 * @param  {RestClient}     callback.client         The authenticated client for the global admin that was created
 * @throws {AssertionError}                         Thrown if any request or assertions fail
 */
var assertCreateGlobalAdmin = module.exports.assertCreateGlobalAdmin = function(client, username, password, displayName, callback) {
    client.admin.createGlobalAdmin(username, password, displayName, function(err, globalAdmin) {
        assert.ok(!err);

        // Ensure the returned global admin has the expected properties
        assertGlobalAdmin(globalAdmin, {
            'match': {
                'username': username,
                'displayName': displayName
            },
            'missing': ['password']
        });

        // Ensure re-accessing the admin from the server has the expected properties
        assertGetGlobalAdmin(client, globalAdmin.id, function(globalAdmin) {
            assertGlobalAdmin(globalAdmin, {
                'match': {
                    'username': username,
                    'displayName': displayName
                },
                'missing': ['password']
            });

            // Ensure the created global admin can log in
            TestsUtil.getAnonymousGlobalAdminRestClient(function(createdGlobalAdminClient) {
                AuthTestsUtil.assertLogin(createdGlobalAdminClient, username, password, function() {
                    return callback(globalAdmin, createdGlobalAdminClient);
                });
            });
        });
    });
};

/**
 * Attempt to create a global administrator, ensuring the request fails in the specified manner
 *
 * @param  {RestClient}     client                  The REST client to make the request with
 * @param  {String}         username                The username of the global administrator
 * @param  {String}         password                The password of the global administrator
 * @param  {String}         displayName             The display name of the global administrator
 * @param  {Number}         code                    The expected HTTP code of the failed request
 * @param  {Function}       callback                Invoked when the global admin is successfully created
 * @param  {Object}         callback.err            An error that occurred, if any
 * @param  {GlobalAdmin}    callback.globalAdmin    The global admin that was created
 * @throws {AssertionError}                         Thrown if any request or assertions fail
 */
var assertCreateGlobalAdminFails = module.exports.assertCreateGlobalAdminFails = function(client, username, password, displayName, code, callback) {
    // Ensure the create request fails in the expected manner
    client.admin.createGlobalAdmin(username, password, displayName, function(err, globalAdmin) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        assertGlobalAdmin(globalAdmin, {'exists': false});

        return callback();
    });
};

/**
 * Update the global admin identified by the given id, ensuring the update is successful
 *
 * @param  {RestClient}     client                  The REST client to make the request with
 * @param  {Number}         id                      The id of the global admin to update
 * @param  {String}         displayName             The display name with which to update the global admin
 * @param  {Function}       callback                Invoked when the global admin is successfully updated
 * @param  {GlobalAdmin}    callback.globalAdmin    The updated version of the global admin
 * @throws {AssertionError}                         Thrown if any assertions fail
 */
var assertUpdateGlobalAdmin = module.exports.assertUpdateGlobalAdmin = function(client, id, displayName, callback) {
    // Update the global admin, ensuring the resulting updated global admin has the new display name
    client.admin.updateGlobalAdmin(id, displayName, function(err, updatedGlobalAdmin) {
        assert.ok(!err);
        assertGlobalAdmin(updatedGlobalAdmin, {
            'match': {
                'id': id,
                'displayName': displayName
            },
            'missing': ['password']
        });

        // Get the global admin and ensure the persisted copy has the display name
        assertGetGlobalAdmin(client, id, function(globalAdmin) {
            assertGlobalAdmin(updatedGlobalAdmin, {
                'match': {
                    'id': id,
                    'displayName': displayName
                },
                'missing': ['password']
            });

            return callback();
        });
    });
};

/**
 * Attempt to update the global admin, ensuring the request fails in the specified manner
 *
 * @param  {RestClient}     client                  The REST client to make the request with
 * @param  {Number}         id                      The id of the global admin to update
 * @param  {String}         displayName             The display name with which to update the global admin
 * @param  {Number}         code                    The expected HTTP code of the failed request
 * @param  {Function}       callback                Invoked when the global admin fails to update
 * @throws {AssertionError}                         Thrown if any assertions fail
 */
var assertUpdateGlobalAdminFails = module.exports.assertUpdateGlobalAdminFails = function(client, id, displayName, code, callback) {
    client.admin.updateGlobalAdmin(id, displayName, function(err, updatedGlobalAdmin) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        assertGlobalAdmin(updatedGlobalAdmin, {'exists': false});
        return callback();
    });
};

/**
 * Assert that a global administrator's password can be changed
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the global administrator for which to change the local password
 * @param  {String}             newPassword                     The new password for the global administrator
 * @param  {String}             password                        The password of the global administrator making the change
 * @param  {Function}           callback                        Standard callback function
 * @param  {RestClient}         callback.client                 A client that's authenticated with the new password
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertChangePassword = module.exports.assertChangePassword = function(client, id, newPassword, password, callback) {
    // Change the global administrator's password
    client.admin.changePassword(id, newPassword, password, function(err) {
        assert.ok(!err);

        // Grab the admin's profile information so we can attempt a login
        // and verify the password was changed successfully
        assertGetGlobalAdmin(client, id, function(globalAdmin) {

            // Get an anonymous global client
            TestsUtil.getAnonymousGlobalAdminRestClient(function(newClient) {
                assertGetMe(newClient, function(me) {
                    assert.ok(me.anon);

                    // Authenticate using the new password
                    AuthTestsUtil.assertLogin(newClient, globalAdmin.username, newPassword, function() {

                        // Verify the client is logged in
                        assertGetMe(newClient, function(me) {
                            assert.ok(!me.anon);
                            assert.strictEqual(me.id, globalAdmin.id);
                            return callback(newClient);
                        });
                    });
                });
            });
        });
    });
};

/**
 * Assert that a global administrator's password can not be changed
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the global administrator for which to change the password
 * @param  {String}             newPassword                     The new password for the global administrator
 * @param  {String}             password                        The password of the global administrator making the change
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertChangePasswordFails = module.exports.assertChangePasswordFails = function(client, id, newPassword, password, code, callback) {
    client.admin.changePassword(id, newPassword, password, function(err) {
        assert.ok(err);
        assert.strictEqual(err.code, code);

        return callback();
    });
};

/**
 * Delete all global administrators identified by the list of ids, ensuring that all the deletes
 * have the expected side effects
 *
 * @param  {RestClient}     client      The REST client to make the request with
 * @param  {String[]}       ids         The ids of the global admins to delete
 * @param  {Function}       callback    Invoked when all global admins are successfully deleted
 * @throws {AssertionError}             Thrown if any request or assertions fail
 */
var assertDeleteGlobalAdmins = module.exports.assertDeleteGlobalAdmins = function(client, ids, callback) {
    if (_.isEmpty(ids)) {
        return callback();
    }

    ids = ids.slice();
    assertDeleteGlobalAdmin(client, ids.shift(), function() {
        return assertDeleteGlobalAdmins(client, ids, callback);
    });
};

/**
 * Delete a global administrator, ensuring the user is created as expected
 *
 * @param  {RestClient}     client                  The REST client to make the request with
 * @param  {Number}         id                      The id of the global admin to delete
 * @param  {Function}       callback                Standard callback function
 * @param  {GlobalAdmin}    callback.globalAdmin    The global admin that was created
 * @throws {AssertionError}                         Thrown if any request or assertions fail
 */
var assertDeleteGlobalAdmin = module.exports.assertDeleteGlobalAdmin = function(client, id, callback) {
    // Get a global admin client for a global admin that we never delete. That way we can use it
    // to perform post-delete assertions on data
    TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {

        // Get the global admin user we're about to delete
        assertGetGlobalAdmin(client, id, function(globalAdmin) {

            // Delete the global admin
            client.admin.deleteGlobalAdmin(id, function(err) {
                assert.ok(!err);

                // Ensure the global admin no longer exists
                assertGetAllGlobalAdmins(globalAdminClient, null, function(globalAdmins) {
                    assertGlobalAdmin(_.findWhere(globalAdmins, {'id': id}), {'exists': false});

                    // Ensure we can no longer authenticate as this global admin
                    TestsUtil.getAnonymousGlobalAdminRestClient(function(anonymousClient) {
                        return AuthTestsUtil.assertLoginFails(anonymousClient, globalAdmin.username, globalAdmin.password, callback);
                    });
                });
            });
        });
    });
};

/**
 * Attempt to delete a global administrator, ensuring that the request fails in the expected manner
 *
 * @param  {RestClient}     client      The REST client to make the request with
 * @param  {String}         id          The id of the global admin to attempt to delete
 * @param  {Number}         code        The expected HTTP code of the delete request
 * @param  {Function}       callback    Invoked when all assertions succeed
 * @throws {AssertionError}             Thrown if the request does not fail in the expected manner
 */
var assertDeleteGlobalAdminFails = module.exports.assertDeleteGlobalAdminFails = function(client, id, code, callback) {
    client.admin.deleteGlobalAdmin(id, function(err) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        return callback();
    });
};

/**
 * Get the "me" object of the currently authenticated user, assuming we have a global administrator
 * authenticated
 *
 * @param  {RestClient}     client          The REST client to make the request with
 * @param  {Function}       callback        Invoked when all assertions succeed
 * @param  {Me}             callback.me     The me feed that was fetched
 * @throws {AssertionError}                 Thrown if any request or assertions fail
 */
var assertGetMe = module.exports.assertGetMe = function(client, callback) {
    client.admin.getMe(function(err, me) {
        assert.ok(!err);
        return callback(me);
    });
};
