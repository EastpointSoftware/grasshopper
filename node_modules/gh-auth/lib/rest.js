/**
 * Copyright (c) 2015 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var passport = require('passport');
var util = require('util');

var GrassHopper = require('gh-core');
var log = require('gh-core/lib/logger').logger('gh-auth');

var AuthConstants = require('gh-auth/lib/constants');
var AuthUtil = require('./util');
var ShibbolethAPI = require('./api.shibboleth');

/**
 * @REST createOauthClient
 *
 * Create a new oauth client
 *
 * @Server      admin
 * @Method      POST
 * @Path        /auth/oauth/client
 * @FormParam   {number}        app             The id of the app on which the client should be created
 * @FormParam   {string}        displayName     The name of the client
 * @FormParam   {string}        redirectUri     The redirect uri of the client
 * @Return      {OauthClient}                   The created oauth client
 */

/**
 * @REST createOauthClient
 *
 * Create a new oauth client
 *
 * @Server      app
 * @Method      POST
 * @Path        /auth/oauth/client
 * @FormParam   {string}        displayName     The name of the client
 * @FormParam   {string}        redirectUri     The redirect uri of the client
 * @Return      {OauthClient}                   The created oauth client
 */

/**
 * @REST updateOauthClient
 *
 * Update an oauth client
 *
 * @Server      admin,app
 * @Method      POST
 * @Path        /auth/oauth/client/{id}
 * @PathParam   {string}        id              The id of the client to update
 * @FormParam   {string}        displayName     The new name of the client, if applicable
 * @FormParam   {string}        redirectUri     The new redirect uri of the client, if applicable
 * @Return      {OauthClient}                   The updated oauth client
 */

/**
 * @REST disableOauthClient
 *
 * Disable an oauth client
 *
 * @Server      admin,app
 * @Method      POST
 * @Path        /auth/oauth/client/{id}/disable
 * @PathParam   {string}            id  The id of the client to disable
 * @Return      {OauthClient}           The disabled oauth client
 */

/**
 * @REST enableOauthClient
 *
 * Enable an oauth client
 *
 * @Server      admin,app
 * @Method      POST
 * @Path        /auth/oauth/client/{id}/enable
 * @PathParam   {string}        id  The id of the client to enable
 * @Return      {OauthClient}       The enabled oauth client
 */

/**
 * @REST regenerateOauthClientSecret
 *
 * Regenerate an oauth client secret
 *
 * @Server      admin,app
 * @Method      POST
 * @Path        /auth/oauth/client/{id}/regenerateSecret
 * @PathParam   {string}        id      The id of the client whose secret to regenerate
 * @Return      {OauthClient}           The oauth client with its updated secret
 */

/**
 * @REST getOauthClients
 *
 * Get all oauth clients for an app
 *
 * @Server      admin
 * @Method      GET
 * @Path        /auth/oauth/client
 * @QueryParam  {number}            app         The id of the app to retrieve the users for
 * @QueryParam  {number}            [limit]     The maximum number of results to retrieve. Default: 10
 * @QueryParam  {number}            [offset]    The paging number of the results to retrieve
 * @Return      {OauthClientList}               The oauth clients
 */

/**
 * @REST getOauthClients
 *
 * Get all oauth clients for an app
 *
 * @Server      app
 * @Method      GET
 * @Path        /auth/oauth/client
 * @QueryParam  {number}            [limit]     The maximum number of results to retrieve. Default: 10
 * @QueryParam  {number}            [offset]    The paging number of the results to retrieve
 * @Return      {OauthClientList}               The oauth clients
 */

/**
 * @REST getOauthClient
 *
 * Get an oauth client
 *
 * @Server      admin,app
 * @Method      GET
 * @Path        /auth/oauth/client/{id}
 * @PathParam   {number}        id      The id of the oauth client to retrieve
 * @Return      {OauthClient}           The requested oauth client
 */

/**
 * @REST getOauthAccessTokensByUser
 *
 * Get all oauth access tokens for a user
 *
 * @Server      admin,app
 * @Method      GET
 * @Path        /auth/oauth/accessToken/user/{userId}
 * @QueryParam  {number}                [limit]     The maximum number of results to retrieve. Default: 10
 * @QueryParam  {number}                [offset]    The paging number of the results to retrieve
 * @Return      {OauthAccessTokenList}              The access tokens
 */

/**
 * @REST getOauthAccessTokenByToken
 *
 * Get an oauth access token by its token
 *
 * @Server      admin,app
 * @Method      GET
 * @Path        /auth/oauth/accessToken/token/{token}
 * @PathParam   {string}            token   The token value of the access token
 * @Return      {OauthAccessToken}          The requested access token
 */

/**
 * @REST grantOauthAuthorizationCode
 *
 * Grant an oauth authorization code using a user session
 *
 * @Server      app
 * @Method      POST
 * @Path        /auth/oauth/grant
 * @FormParam   {number}    client_id       The id of the client to grant the authorization code
 * @FormParam   {number}    [for_user_id]   The id of the user on whose behalf to grant the authorization code. Only accessible to administrators
 * @Return      {void}                      Redirect's to the client's configured redirect URI
 */

/**
 * @REST exchangeOauthAccessToken
 *
 * Exchange an oauth authorization code for an access token
 *
 * @Server      app
 * @Method      POST
 * @Path        /auth/oauth/exchange
 * @FormParam   {string}                    grant_type      The type of grant to use. Must be `authorization_code`
 * @FormParam   {string}                    code            The authorization code that was previously granted\
 * @FormParam   {string}                    client_id       The id of the client who will be granted access to perform requests
 * @FormParam   {string}                    client_secret   The secret of the client who will be granted access to perform requests
 * @FormParam   {string}                    redirect_uri    The redirect_uri of the client to which you are authenticating
 * @Return      {OauthAccessTokenExchange}                  The response containing the access token string to use as request credentials
 */

// Bind OAuth REST auth and management functionality
require('./oauth/rest');

/**
 * @REST logout
 *
 * Log out
 *
 * @Server      admin,app
 * @Method      POST
 * @Path        /auth/logout
 * @Return      {void}
 */
var _logout = function(req, res) {
    // Kill the user session
    req.logout();

    // Redirect the user to the main landing page
    return res.redirect('/');
};

GrassHopper.globalAdminRouter.on('post', '/api/auth/logout', _logout);
GrassHopper.appRouter.on('post', '/api/auth/logout', _logout);

/* Local authentication */

/**
 * @REST localLogin
 *
 * Log in using local authentication
 *
 * @Server      admin,app
 * @Method      POST
 * @Path        /auth/login
 * @FormParam   {string}            password                The password for the user
 * @FormParam   {string}            username                The username for the user
 * @Return      {User}                                      The logged in user
 */
var _localLogin = function(req, res, next) {
    passport.authenticate(AuthConstants.strategies.LOCAL, function(err, ghAuthInfo) {
        if (err) {
            return next(err);
        } else if (!ghAuthInfo || !ghAuthInfo.user) {
            return res.status(401).end();
        }

        // Create the user session
        req.logIn(ghAuthInfo, function(err) {
            if (err) {
                return next(err);
            }

            return res.status(200).send(req.user);
        });
    })(req, res, next);
};

GrassHopper.globalAdminRouter.on('post', '/api/auth/login', _localLogin);
GrassHopper.appRouter.on('post', '/api/auth/login', _localLogin);

/* Shibboleth authentication */

/**
 * @REST shibbolethLogin
 *
 * Log in using Shibboleth authentication
 *
 * @Server      app
 * @Method      POST
 * @Path        /auth/shibboleth
 * @Return      {void}
 */
GrassHopper.appRouter.on('post', '/api/auth/shibboleth', function(req, res) {
    if (!ShibbolethAPI.isEnabled(req.ctx.app.id)) {
        return res.status(400).send('Shibboleth authentication is not enabled for this application');
    }

    // Get the URL to which the user should be redirected and store it in a cookie,
    // so we can retrieve it once the user returns from the identity provider
    var redirectUrl = AuthUtil.validateRedirectUri(req.body.redirectUrl);
    res.cookie('redirectUrl', redirectUrl, {'signed': true});

    // Redirect the user to our SP host
    var serviceProviderUrl = ShibbolethAPI.getServiceProviderUrl(req.ctx.app.id);
    res.redirect(serviceProviderUrl);
});

/**
 * @REST redirectToIdentityProvider
 *
 * Redirect the user to the configured identity provider
 *
 * @Api         private
 * @Server      app
 * @Method      GET
 * @Path        /auth/shibboleth/sp
 * @QueryParam  {string}            [app]                   The id of the app on which the user wants to authenticate
 * @QueryParam  {string}            [signature]             The signature for the app id
 * @QueryParam  {number}            [expires]               The timestamp (millis since epoch) at which the signature expires
 * @Return      {void}
 */
GrassHopper.appRouter.on('get', '/api/auth/shibboleth/sp', function(req, res, next) {
    if (ShibbolethAPI.getSPHost() !== req.hostname) {
        return res.status(501).send('This endpoint is not enabled on a regular app');
    }

    var appId = req.query.app;
    var signature = req.query.signature;
    var expires = req.query.expires;

    // Validate the parameters
    ShibbolethAPI.validateInitiateParameters(appId, signature, expires, function(err, app) {
        if (err) {
            return res.status(err.code).send(err.msg);
        }

        // Keep track of the application from which the user originated
        res.cookie(AuthConstants.strategies.SHIBBOLETH, appId, {'signed': true});

        // Get the generic error handler
        var errorHandler = AuthUtil.handlePassportError(req, res, next);

        // Initiate the authentication process
        passport.authenticate(AuthConstants.strategies.SHIBBOLETH, app)(req, res, errorHandler);
    });
});

/**
 * @REST identityProviderCallback
 *
 * Authenticate the user and redirect back to the originating app
 *
 * @Api         private
 * @Server      app
 * @Method      GET
 * @Path        /auth/shibboleth/sp/callback
 * @Return      {void}
 */
GrassHopper.appRouter.on('get', '/api/auth/shibboleth/sp/callback', function(req, res) {
    if (ShibbolethAPI.getSPHost() !== req.hostname) {
        return res.status(501).send('This endpoint is not enabled on a regular tenant');
    }

    // Get the id of the application this user originated from
    var appId = req.signedCookies.shibboleth;
    if (!appId) {
        return res.status(400).send('Could not find application id in a cookie, did you start the Shibboleth Sign in process correctly?');
    }

    // Remove the cookie
    res.clearCookie(AuthConstants.strategies.SHIBBOLETH);

    // Get the full app object to allow for the full URL to be constructed
    ShibbolethAPI.getShibbolethEnabledApplication(appId, function(err, app) {
        if (err) {
            return res.status(err.code).send(err.msg);
        }

        // The base url for the app
        var appUrl = util.format('https://%s', app.host);

        // Validate and authenticate the request
        passport.authenticate(AuthConstants.strategies.SHIBBOLETH, app, function(err, user, challenges, status) {
            if (err) {
                log().error({'err': err, 'appId': appId}, 'Error during Shibboleth authentication');
                return res.redirect(appUrl + '/?authentication=failed&reason=error');
            } else if (!user) {
                // The user's credentials didn't check out. This would rarely occur in a
                // normal situation as external auth providers don't usually redirect with
                // bad parameters in the request, so somebody is probably tampering with it.
                // We bail out immediately
                log().warn({'challenges': challenges, 'status': status}, 'Possible tampering of external callback request detected');
                return res.redirect(appUrl + '/?authentication=failed&reason=tampering');
            }

            // The user's authentication credentials are correct and the user was created
            // or retrieved from the database. Send the user back to their own app and pass
            // along their user id
            var redirectUrl = ShibbolethAPI.getAuthenticatedUserRedirectUrl(app, user);
            res.redirect(redirectUrl);
        })(req, res);
    });
});

/**
 * @REST redirectToOriginatingApp
 *
 * Redirect an authenticated user back to their originating app
 *
 * @Api         private
 * @Server      app
 * @Method      GET
 * @Path        /auth/shibboleth/callback
 * @QueryParam  {number}            [user]                  The id of the user that needs to be signed in
 * @QueryParam  {string}            [signature]             The signature for the user id
 * @QueryParam  {number}            [expires]               The timestamp (millis since epoch) at which the signature expires
 * @Return      {void}
 */
GrassHopper.appRouter.on('get', '/api/auth/shibboleth/callback', function(req, res) {
    if (!ShibbolethAPI.isEnabled(req.ctx.app.id)) {
        return res.status(400).send('Shibboleth authentication is not enabled for this application');
    }

    // Get the user from the database
    var user = req.query.user;
    var signature = req.query.signature;
    var expires = req.query.expires;
    ShibbolethAPI.getUser(req.ghApp, user, signature, expires, function(err, user) {
        if (err) {
            return res.status(err.code).send(err.msg);
        }

        // Create a session for this user
        var ghAuthInfo = {
            'app': req.ghApp,
            'user': user
        };
        req.logIn(ghAuthInfo, function(err) {
            if (err) {
                return res.status(500).send('Failed to log you in');
            }

            // Get the URL to which the user should be redirected
            var redirectUrl = AuthUtil.validateRedirectUri(req.signedCookies.redirectUrl);

            // Remove the cookie
            res.clearCookie('redirectUrl');

            // The user now has a session within Express. We can now safely
            // redirect the user into the system
            return res.redirect(redirectUrl);
        });
    });
});

/* Signed authentication */

/**
 * @REST becomeUser
 *
 * Get the request information for an administrator to become a user
 *
 * @Server      admin,app
 * @Method      GET
 * @Path        /auth/signed/become
 * @QueryParam  {number}            becomeUserId            The id of the user to become
 * @Return      {SignedAuthInfo}                            Request information needed to become the specified user
 */
var _becomeUser = function(req, res) {
    res.sendStatus(501);
};

GrassHopper.globalAdminRouter.on('get', '/api/auth/signed/become', _becomeUser);
GrassHopper.appRouter.on('get', '/api/auth/signed/become', _becomeUser);

/**
 * @REST signedAuth
 *
 * Log in using signed authentication
 *
 * @Server      app
 * @Method      POST
 * @Path        /auth/signed
 * @BodyParam   {SignedAuthBody}    body                    The request information acquired from the `GET /api/auth/signed/*` endpoint
 * @Return      {void}
 */
GrassHopper.appRouter.on('post', '/api/auth/signed', function(req, res, next) {
    res.sendStatus(501);
});
