/**
 * Copyright (c) 2015 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');
var fs = require('fs');
var path = require('path');

var AdminsDAO = require('gh-admins/lib/internal/dao');
var AuthAPI = require('gh-auth');
var ConfigAPI = require('gh-config');
var DocsAPI = require('gh-docs');
var StatsdAPI = require('gh-statsd');
var UsersAPI = require('gh-users');

var DB = require('./db');
var Logger = require('./logger');
var Modules = require('./modules');
var Server = require('./server');
var Signature = require('./signature');

var log = Logger.logger('gh-core/api');

// The Express server for the global admin server
var globalAdminServer = module.exports.globalAdminServer = null;

// The Express server for apps
var appServer = module.exports.appServer = null;

/**
 * Initialize the application
 *
 * @param  {Object}         config              The application configuration
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 */
var init = module.exports.init = function(config, callback) {

    // Apply global utilities
    require('./globals');

    // Initialize the logger
    Logger.refreshLogConfiguration(config.log);

    // Set up application-level error handler
    process.on('uncaughtException', function(err) {
        log().error({
            'err': err
        }, 'An uncaught exception was raised to the application.');
    });

    // Initialize the signature logic
    Signature.init(config.signing);

    // Initialize the statsd API
    StatsdAPI.init(config.statsd);

    // Connect to the database
    DB.init(config, function(err) {
        if (err) {
            return callback(err);
        }

        // Ensure the default global administrator exists
        _ensureDefaultGlobalAdministrator(function(err) {
            if (err) {
                return callback(err);
            }

            // Initialise the modules lister. It will cache a list of
            // all the Grasshopper modules in the application container
            Modules.init(function(err) {
                if (err) {
                    return callback(err);
                }

                // Initialise the config api
                ConfigAPI.init(function(err) {
                    if (err) {
                        return callback(err);
                    }

                    // Initialise the users api
                    UsersAPI.init(function(err) {
                        if (err) {
                            return callback(err);
                        }

                        // Initialise the Pattern listener
                        require('gh-series/lib/internal/listener');

                        // Intitialise the Express servers
                        return _initialiseExpressServers(config, callback);
                    });
                });
            });
        });
    });
};

/**
 * Ensure that the default global administrator account exists. If no such
 * account exists, one will be created
 *
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 * @api private
 */
var _ensureDefaultGlobalAdministrator = function(callback) {
    // Ensure that the default global administrator exists
    var defaultGlobalAdmin = {
        'username': 'administrator',
        'password': 'administrator',
        'displayName': 'Global Admin'
    };
    AdminsDAO.getGlobalAdminByUsername(defaultGlobalAdmin.username, function(err, globalAdmin) {
        if (err && err.code !== 404) {
            return callback(err);
        }

        // Create the default global administrator if they don't exist yet
        var needsGlobalAdmin = (err && err.code === 404);
        _.ghIf(needsGlobalAdmin, AdminsDAO.createGlobalAdmin, defaultGlobalAdmin.username, defaultGlobalAdmin.password, defaultGlobalAdmin.displayName, function(err, globalAdmin) {
            if (err) {
                log().error({'err': err}, 'Failed to create the default global administrator');
                return callback(err);
            }

            return callback();
        });
    });
};

/**
 * Initialise the global admin and app Express servers, initialise the REST API endpoint
 * and cache the REST API documentation
 *
 * @param  {Object}         config              The application configuration
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 * @api private
 */
var _initialiseExpressServers = function(config, callback) {
    // Initialise the Express servers
    module.exports.globalAdminServer = Server.setUpServer(config.servers.adminPort, config);
    module.exports.appServer = Server.setUpServer(config.servers.appsPort, config);

    // Initialise the REST router wrapper
    module.exports.globalAdminRouter = Server.setupRouter(module.exports.globalAdminServer);
    module.exports.appRouter = Server.setupRouter(module.exports.appServer);

    var ghModules = Modules.getAvailableModules();

    // Check if a `rest.js` file exists in the `lib` folder in each
    // module. If such a file exists, we require it. This allows other
    // modules to add in their own set of REST apis
    _.each(ghModules, function(module) {
        var restFile = path.join(__dirname, '../..', module, '/lib/rest.js');
        if (fs.existsSync(restFile)) {
            log().debug({'module': module}, 'Trying to register REST apis');
            require(module + '/lib/rest');
        }
    });

    log().info('All REST APIs have been initialized');

    // Initialize the Passport authentication strategies
    AuthAPI.init(config);

    /*!
     * Add middleware that will check if the user has accepted the Terms and Conditions, if enabled.
     * If the user hasn't accepted the Terms and Conditions, all POST requests (excluding whitelisted post requests) will be prevented.
     */
    module.exports.appServer.use(function(req, res, next) {
        // The Terms and Conditions middleware is only applicable on logged in users who
        // try to interact with the system excluding a set of whitelisted endpoints
        if (!_.contains(['GET', 'HEAD'], req.method) && UsersAPI.needsToAcceptTermsAndConditions(req.ctx) && _requiresTermsAndConditions(req.path)) {
            return res.status(419).send('You need to accept the Terms and Conditions before you can interact with this application');
        }
        return next();
    });

    Server.postInitialize(module.exports.globalAdminServer, module.exports.globalAdminRouter);
    Server.postInitialize(module.exports.appServer, module.exports.appRouter);

    /*!
     * Called when all the modules have been documented
     */
    var moduleDocumented = _.after(ghModules.length, function() {
        // Add the models to all the api resources
        DocsAPI.addModelsToResources();
        log().info('All REST APIs have been documented');
        return callback();
    });

    // Document each module's REST APIs
    _.each(ghModules, function(module) {
        DocsAPI.documentModule(module, moduleDocumented);
    });
};

/**
 * Check if a URL requires the Terms and Conditions to be accepted
 *
 * @param  {String}     url     The URL to check
 * @return {Boolean}            `true` if the user hasto accept the Terms and Conditions in order to POST to this url, `false` otherwise
 * @api private
 */
var _requiresTermsAndConditions = function(url) {
    return !(url.indexOf('/api/auth') === 0 || url.indexOf('/api/users') === 0);
};
