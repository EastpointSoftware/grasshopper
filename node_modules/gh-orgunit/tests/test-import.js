/**
 * Copyright (c) 2015 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');
var assert = require('assert');
var util = require('util');

var AuthTestsUtil = require('gh-auth/tests/util');
var ConfigTestsUtil = require('gh-config/tests/util');
var EventsTestsUtil = require('gh-events/tests/util');
var GroupsTestsUtil = require('gh-groups/tests/util');
var SeriesTestsUtil = require('gh-series/tests/util');
var TestsUtil = require('gh-tests');
var UsersTestsUtil = require('gh-users/tests/util');

var OrgUnitDAO = require('gh-orgunit/lib/internal/dao');
var OrgUnitImport = require('gh-orgunit/lib/internal/import');
var OrgUnitTestsUtil = require('./util');

describe('Organisational units - import', function() {

    /**
     * Returns a test tree from the `./data` directory
     *
     * @param  {String}     name    The name of the file where the tree is stored
     * @return {Object}             The test tree
     * @api private
     */
    var _getTestTree = function(name) {
        var tree = require(util.format('./data/%s', name));
        return _.cloneDeep(tree);
    };

    /**
     * Recursively search through a tree and look for an organisational unit, series or event
     * with a given external id. When the node with the given external id is found, it will be
     * returned in its entirety (i.e., including it's child nodes)
     *
     * @param  {Object}     tree            The tree to search through
     * @param  {String}     externalId      The external id to search for
     * @return {Object}                     The matching node or null if no tree could be found
     * @api private
     */
    var _getNode = function(tree, externalId) {
        if (tree.externalId === externalId) {
            return tree;
        }

        // Search through the children (including series and events)
        var allThings = _.union(tree.children, tree.series, tree.events);
        for (var i = 0; i < allThings.length; i++) {
            var foundThing = _getNode(allThings[i], externalId);
            if (foundThing) {
                return foundThing;
            }
        }

        return null;
    };

    /**
     * Generate a node structure
     *
     * @param  {String}         type            The type of the root node
     * @param  {...String[]}    childTypes      The types of the children of the root node
     * @return {Object}                         A node structure that can be imported
     * @api private
     */
    var _generateStructure = function(type, childTypes) {
        // Construct the root node
        var root = {
            'externalId': util.format('eid-%d', _.random(100000)),
            'type': type,
            'displayName': TestsUtil.generateString(32),
            'description': TestsUtil.generateString(128),
            'children': [],
            'series': []
        };

        // Recursively construct the children, if any
        if (!_.isEmpty(childTypes)) {
            // Get the remainder of the arguments in case we need to generate grand-children
            var args = _.values(arguments);
            args.splice(0, 2);

            // If an argument was provided as a simple string, we only need to generate 1 child.
            // If it was provided as an array, we generate a child per string in the array
            if (!_.isArray(childTypes)) {
                childTypes = [childTypes];
            }
            _.each(childTypes, function(childType) {
                // Shift the child type in the arguments array as the first element and recursively
                // generate its tree structure
                args.unshift(childType);
                root.children.push(_generateStructure.apply(null, args));
            });
        }

        return root;
    };

    describe('Validation', function() {

        /**
         * Test that verifies basic validation when importing data
         */
        it('verify validation when importing data', function(callback) {
            OrgUnitTestsUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test part', 'part', {}, function(part) {
                var importData = _getTestTree('1part-2module-1series-1event');

                // Invalid or missing id
                OrgUnitTestsUtil.assertImportOrgUnitFails(global.tests.admins.cam2013.client, 'Not a number', importData, false, 400, function() {
                    OrgUnitTestsUtil.assertImportOrgUnitFails(global.tests.admins.cam2013.client, -1, importData, false, 404, function() {
                        OrgUnitTestsUtil.assertImportOrgUnitFails(global.tests.admins.cam2013.client, 23424234234, importData, false, 404, function() {

                            // Invalid data
                            OrgUnitTestsUtil.assertImportOrgUnitFails(global.tests.admins.cam2013.client, part.id, 'oh lawdy', false, 400, function() {
                                OrgUnitTestsUtil.assertImportOrgUnitFails(global.tests.admins.cam2013.client, part.id, 123, false, 400, function() {

                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies authorization when importing data
         */
        it('verify authorization when importing data', function(callback) {
            // Create an organisational unit
            OrgUnitTestsUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'part', null, function(part) {
                var importData = _getTestTree('1part-2module-1series-1event');

                // Anonymous users cannot import organisational units
                TestsUtil.getAnonymousAppUserClient(global.tests.apps.cam2013, function(anonymousClient) {
                    OrgUnitTestsUtil.assertImportOrgUnitFails(anonymousClient, part.id, importData, false, 401, function() {
                        TestsUtil.getAnonymousGlobalAdminRestClient(function(anonymousClient) {
                            OrgUnitTestsUtil.assertImportOrgUnitFails(anonymousClient, part.id, importData, false, 401, function() {

                                // Authenticated users cannot update organisational units
                                TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {
                                    OrgUnitTestsUtil.assertImportOrgUnitFails(simon.client, part.id, importData, false, 401, function() {

                                        // Application administrators from another application cannot update the organisational unit
                                        OrgUnitTestsUtil.assertImportOrgUnitFails(global.tests.admins.oxford2014.client, part.id, importData, false, 401, function() {

                                            // Members of the organisational unit's group can import data
                                            var memberUpdate = {};
                                            memberUpdate[simon.profile.id] = true;
                                            GroupsTestsUtil.assertUpdateGroupMembers(global.tests.admins.cam2013.client, part.GroupId, memberUpdate, function() {
                                                OrgUnitTestsUtil.assertImportOrgUnit(simon.client, part.id, importData, false, function() {

                                                    // Application administrators can import data
                                                    OrgUnitTestsUtil.assertImportOrgUnit(global.tests.admins.cam2013.client, part.id, importData, false, function() {
                                                        return callback();
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that external ids have to be unique
         */
        it('verify external ids have to be unique within the tree', function(callback) {
            OrgUnitTestsUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test part', 'part', {}, function(part) {

                // Trying to import 2 organisatioanl units with the same external id should fail
                var importData = _getTestTree('1part-2module-1series-1event');
                importData.children[1].externalId = importData.children[0].externalId;
                OrgUnitTestsUtil.assertImportOrgUnitImportFails(global.tests.admins.cam2013.client, part.id, importData, false, ['Duplicate externalId'], function() {

                    // Trying to import an organisational unit with the same external id as a series should fail
                    importData = _getTestTree('1part-1module-1series-1event');
                    importData.children[0].externalId = importData.children[0].series[0].externalId;
                    OrgUnitTestsUtil.assertImportOrgUnitImportFails(global.tests.admins.cam2013.client, part.id, importData, false, ['Duplicate externalId'], function() {

                        // Trying to import an organisational unit with the same external id as an event should fail
                        importData = _getTestTree('1part-1module-1series-1event');
                        importData.children[0].externalId = importData.children[0].series[0].events[0].externalId;
                        OrgUnitTestsUtil.assertImportOrgUnitImportFails(global.tests.admins.cam2013.client, part.id, importData, false, ['Duplicate externalId'], function() {

                            // Trying to import a series with the same external id as an event should fail
                            importData = _getTestTree('1part-1module-1series-1event');
                            importData.children[0].series[0].externalId = importData.children[0].series[0].events[0].externalId;
                            OrgUnitTestsUtil.assertImportOrgUnitImportFails(global.tests.admins.cam2013.client, part.id, importData, false, ['Duplicate externalId'], function() {

                                // Import the structure into the part
                                importData = _getTestTree('1part-2module-1series-1event');
                                OrgUnitTestsUtil.assertImportOrgUnit(global.tests.admins.cam2013.client, part.id, importData, false, function() {

                                    // Verify we can import the SAME structure into ANOTHER part. This is necessary
                                    // as multiple consumers can import data, but they don't necessarily know about
                                    // each other's external ids.
                                    OrgUnitTestsUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test part 2', 'part', {}, function(part2) {
                                        OrgUnitTestsUtil.assertImportOrgUnit(global.tests.admins.cam2013.client, part2.id, importData, false, function() {

                                            // Sanity-check the structure was imported into both organisational units
                                            OrgUnitTestsUtil.assertExportOrgUnit(global.tests.admins.cam2013.client, part.id, null, function(exportPart1) {
                                                OrgUnitTestsUtil.assertExportOrgUnit(global.tests.admins.cam2013.client, part2.id, null, function(exportPart2) {
                                                    assert.ok(exportPart1.children[0].series[0].events[0]);
                                                    assert.ok(exportPart2.children[0].series[0].events[0]);
                                                    return callback();
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that organisational unit types have to be on the same level
         */
        it('verify organisational unit types have to be on the same level', function(callback) {
            OrgUnitTestsUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test part', 'part', {}, function(part) {

                // Importing a tree where the parent has the same type as the child is not allowed
                var importData = _getTestTree('1part-2module-1series-1event');
                importData.type = 'module';
                OrgUnitTestsUtil.assertImportOrgUnitImportFails(global.tests.admins.cam2013.client, part.id, importData, false, ['was used on a different level'], function() {

                    // Importing a tree where the child has the same type as the parent is not allowed
                    importData = _getTestTree('1part-2module-1series-1event');
                    importData.children[0].type = 'part';
                    OrgUnitTestsUtil.assertImportOrgUnitImportFails(global.tests.admins.cam2013.client, part.id, importData, false, ['was used on a different level'], function() {
                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies that importing only works on course, subject or part organisational units
         */
        it('verify importing only works on courses, subjects or parts', function(callback) {
            OrgUnitTestsUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test module', 'module', {}, function(part) {

                // Try to import just a module
                var tree = _getTestTree('1part-1module-1series-1event');
                var importData = tree.children[0];
                OrgUnitTestsUtil.assertImportOrgUnitImportFails(global.tests.admins.cam2013.client, part.id, importData, false, ['only support importing data on courses, subjects or parts'], function() {
                    return callback();
                });
            });
        });

        /**
         * Test that verifies that only timetable types can be imported
         */
        it('verify only timetable types can be imported', function(callback) {
            OrgUnitTestsUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test part', 'part', {}, function(part) {

                // Importing a tree where the parent has the same type as the child is not allowed
                var importData = _getTestTree('1part-2module-1series-1event');
                importData.type = 'wrong-type';
                OrgUnitTestsUtil.assertImportOrgUnitImportFails(global.tests.admins.cam2013.client, part.id, importData, false, ['A valid type must be one of'], function() {
                    return callback();
                });
            });
        });

        /**
         * Test that verifies that only valid timetable structures can be imported
         */
        it('verify only valid timetable structures can be imported', function(callback) {
            OrgUnitTestsUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test course', 'course', {}, function(part) {

                // Assert nesting organisational units under a course
                var importData = _generateStructure('course', 'module');
                OrgUnitTestsUtil.assertImportOrgUnitImportFails(global.tests.admins.cam2013.client, part.id, importData, false, ['Nesting a module under a course is invalid'], function() {
                    importData = _generateStructure('course', 'course');
                    OrgUnitTestsUtil.assertImportOrgUnitImportFails(global.tests.admins.cam2013.client, part.id, importData, false, ['Nesting a course under a course is invalid'], function() {

                        // Assert nesting organisational units under a subject
                        importData = _generateStructure('course', 'subject', 'module');
                        OrgUnitTestsUtil.assertImportOrgUnitImportFails(global.tests.admins.cam2013.client, part.id, importData, false, ['Nesting a module under a subject is invalid'], function() {
                            importData = _generateStructure('course', 'subject', 'course');
                            OrgUnitTestsUtil.assertImportOrgUnitImportFails(global.tests.admins.cam2013.client, part.id, importData, false, ['Nesting a course under a subject is invalid'], function() {
                                importData = _generateStructure('course', 'subject', 'subject');
                                OrgUnitTestsUtil.assertImportOrgUnitImportFails(global.tests.admins.cam2013.client, part.id, importData, false, ['Nesting a subject under a subject is invalid'], function() {

                                    // Assert nesting organisational units under a part
                                    importData = _generateStructure('course', 'part', 'subject');
                                    OrgUnitTestsUtil.assertImportOrgUnitImportFails(global.tests.admins.cam2013.client, part.id, importData, false, ['Nesting a subject under a part is invalid'], function() {
                                        importData = _generateStructure('course', 'part', 'course');
                                        OrgUnitTestsUtil.assertImportOrgUnitImportFails(global.tests.admins.cam2013.client, part.id, importData, false, ['Nesting a course under a part is invalid'], function() {
                                            importData = _generateStructure('course', 'part', 'part');
                                            OrgUnitTestsUtil.assertImportOrgUnitImportFails(global.tests.admins.cam2013.client, part.id, importData, false, ['Nesting a part under a part is invalid'], function() {

                                                // Assert nesting organisational units under a module
                                                importData = _generateStructure('course', 'part', 'module', 'part');
                                                OrgUnitTestsUtil.assertImportOrgUnitImportFails(global.tests.admins.cam2013.client, part.id, importData, false, ['Nesting a part under a module is invalid'], function() {
                                                    importData = _generateStructure('course', 'part', 'module', 'subject');
                                                    OrgUnitTestsUtil.assertImportOrgUnitImportFails(global.tests.admins.cam2013.client, part.id, importData, false, ['Nesting a subject under a module is invalid'], function() {
                                                        importData = _generateStructure('course', 'part', 'module', 'course');
                                                        OrgUnitTestsUtil.assertImportOrgUnitImportFails(global.tests.admins.cam2013.client, part.id, importData, false, ['Nesting a course under a module is invalid'], function() {
                                                            importData = _generateStructure('course', 'part', 'module', 'module');
                                                            OrgUnitTestsUtil.assertImportOrgUnitImportFails(global.tests.admins.cam2013.client, part.id, importData, false, ['Nesting a module under a module is invalid'], function() {
                                                                return callback();
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that organisational units get validated
         */
        it('verify basic organisational unit validation', function(callback) {
            OrgUnitTestsUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test part', 'part', {}, function(part) {

                // Too long displayName
                var importData = _getTestTree('1part-2module-1series-1event');
                importData.children[0].displayName = TestsUtil.generateString(257);
                OrgUnitTestsUtil.assertImportOrgUnitImportFails(global.tests.admins.cam2013.client, part.id, importData, false, ['displayName'], function() {

                    // Too long type
                    importData = _getTestTree('1part-2module-1series-1event');
                    importData.children[0].type = TestsUtil.generateString(33);
                    OrgUnitTestsUtil.assertImportOrgUnitImportFails(global.tests.admins.cam2013.client, part.id, importData, false, ['type'], function() {

                        // Too long description
                        importData = _getTestTree('1part-2module-1series-1event');
                        importData.children[0].description = TestsUtil.generateString(1001);
                        OrgUnitTestsUtil.assertImportOrgUnitImportFails(global.tests.admins.cam2013.client, part.id, importData, false, ['description'], function() {

                            // Invalid metadata
                            importData = _getTestTree('1part-2module-1series-1event');
                            importData.children[0].metadata = 'not an object';
                            OrgUnitTestsUtil.assertImportOrgUnitImportFails(global.tests.admins.cam2013.client, part.id, importData, false, ['metadata'], function() {

                                // Invalid published flag
                                importData = _getTestTree('1part-2module-1series-1event');
                                importData.children[0].published = 'not a boolean';
                                OrgUnitTestsUtil.assertImportOrgUnitImportFails(global.tests.admins.cam2013.client, part.id, importData, false, ['published'], function() {

                                    // Invalid published flag
                                    importData = _getTestTree('1part-2module-1series-1event');
                                    importData.children[0].published = 42;
                                    OrgUnitTestsUtil.assertImportOrgUnitImportFails(global.tests.admins.cam2013.client, part.id, importData, false, ['published'], function() {
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that series get validated
         */
        it('verify basic series validation', function(callback) {
            OrgUnitTestsUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test part', 'part', {}, function(part) {

                // Too long displayName
                var importData = _getTestTree('1part-1module-1series-1event');
                importData.children[0].series[0].displayName = TestsUtil.generateString(257);
                OrgUnitTestsUtil.assertImportOrgUnitImportFails(global.tests.admins.cam2013.client, part.id, importData, false, ['displayName'], function() {

                    // Too long description
                    importData = _getTestTree('1part-1module-1series-1event');
                    importData.children[0].series[0].description = TestsUtil.generateString(1001);
                    OrgUnitTestsUtil.assertImportOrgUnitImportFails(global.tests.admins.cam2013.client, part.id, importData, false, ['description'], function() {
                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies that events get validated
         */
        it('verify basic events validation', function(callback) {
            OrgUnitTestsUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test part', 'part', {}, function(part) {

                // Too long displayName
                var importData = _getTestTree('1part-1module-1series-1event');
                importData.children[0].series[0].events[0].displayName = TestsUtil.generateString(257);
                OrgUnitTestsUtil.assertImportOrgUnitImportFails(global.tests.admins.cam2013.client, part.id, importData, false, ['displayName'], function() {

                    // Missing start date
                    importData = _getTestTree('1part-1module-1series-1event');
                    delete importData.children[0].series[0].events[0].start;
                    OrgUnitTestsUtil.assertImportOrgUnitImportFails(global.tests.admins.cam2013.client, part.id, importData, false, ['start'], function() {

                        // Missing end date
                        importData = _getTestTree('1part-1module-1series-1event');
                        delete importData.children[0].series[0].events[0].end;
                        OrgUnitTestsUtil.assertImportOrgUnitImportFails(global.tests.admins.cam2013.client, part.id, importData, false, ['end'], function() {

                            // Invalid start date
                            importData = _getTestTree('1part-1module-1series-1event');
                            importData.children[0].series[0].events[0].start = 'bleh';
                            OrgUnitTestsUtil.assertImportOrgUnitImportFails(global.tests.admins.cam2013.client, part.id, importData, false, ['start'], function() {

                                // Invalid end date
                                importData = _getTestTree('1part-1module-1series-1event');
                                importData.children[0].series[0].events[0].end = 'bleh';
                                OrgUnitTestsUtil.assertImportOrgUnitImportFails(global.tests.admins.cam2013.client, part.id, importData, false, ['end'], function() {

                                    // The start date cannot come after the end date
                                    importData = _getTestTree('1part-1module-1series-1event');
                                    importData.children[0].series[0].events[0].start = '2015-04-22T17:00:00';
                                    importData.children[0].series[0].events[0].end = '2015-04-22T12:00:00';
                                    OrgUnitTestsUtil.assertImportOrgUnitImportFails(global.tests.admins.cam2013.client, part.id, importData, false, ['end'], function() {

                                        // Too long description
                                        importData = _getTestTree('1part-1module-1series-1event');
                                        importData.children[0].series[0].events[0].description = TestsUtil.generateString(1001);
                                        OrgUnitTestsUtil.assertImportOrgUnitImportFails(global.tests.admins.cam2013.client, part.id, importData, false, ['description'], function() {

                                            // Too long location
                                            importData = _getTestTree('1part-1module-1series-1event');
                                            importData.children[0].series[0].events[0].location = TestsUtil.generateString(257);
                                            OrgUnitTestsUtil.assertImportOrgUnitImportFails(global.tests.admins.cam2013.client, part.id, importData, false, ['location'], function() {

                                                // Too long notes
                                                importData = _getTestTree('1part-1module-1series-1event');
                                                importData.children[0].series[0].events[0].notes = TestsUtil.generateString(10001);
                                                OrgUnitTestsUtil.assertImportOrgUnitImportFails(global.tests.admins.cam2013.client, part.id, importData, false, ['notes'], function() {

                                                    // Too long event type
                                                    importData = _getTestTree('1part-1module-1series-1event');
                                                    importData.children[0].series[0].events[0].type = TestsUtil.generateString(257);
                                                    OrgUnitTestsUtil.assertImportOrgUnitImportFails(global.tests.admins.cam2013.client, part.id, importData, false, ['type'], function() {
                                                        return callback();
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Importing', function() {

        /**
         * Test that verifies that a tree can be imported
         */
        it('verify a tree can be imported', function(callback) {
            // Create the part
            OrgUnitTestsUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test part', 'part', {}, function(part) {
                var importData = _getTestTree('1part-2module-1series-1event');

                OrgUnitTestsUtil.assertImportOrgUnit(global.tests.admins.cam2013.client, part.id, importData, false, function() {

                    // Export the tree
                    OrgUnitTestsUtil.assertExportOrgUnit(global.tests.admins.cam2013.client, part.id, null, function(data) {

                        // Assert the top-level metadata was imported
                        assert.strictEqual(data.displayName, 'OrgUnit 1');
                        assert.strictEqual(data.description, 'OrgUnit 1 description');
                        assert.strictEqual(data.published, true);
                        assert.deepEqual(data.metadata, {});
                        assert.strictEqual(data.type, 'part');

                        // Assert both the modules were imported successfully
                        assert.strictEqual(data.children.length, 2);
                        var orgUnit11 = _getNode(data, 'eid-11');
                        assert.strictEqual(orgUnit11.displayName, 'OrgUnit 11');
                        assert.strictEqual(orgUnit11.description, 'OrgUnit 11 description');
                        assert.strictEqual(orgUnit11.externalId, 'eid-11');
                        assert.strictEqual(orgUnit11.published, true);
                        assert.deepEqual(orgUnit11.metadata, {});
                        assert.strictEqual(orgUnit11.type, 'module');
                        var orgUnit12 = _getNode(data, 'eid-12');
                        assert.strictEqual(orgUnit12.displayName, 'OrgUnit 12');
                        assert.strictEqual(orgUnit12.description, 'OrgUnit 12 description');
                        assert.strictEqual(orgUnit12.externalId, 'eid-12');
                        assert.strictEqual(orgUnit12.published, true);
                        assert.deepEqual(orgUnit12.metadata, {});
                        assert.strictEqual(orgUnit12.type, 'module');

                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies that a tree can be imported multiple times
         */
        it('verify importing a tree is idempotent', function(callback) {
            // Create the part
            OrgUnitTestsUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test part', 'part', {}, function(part) {
                var importData = _getTestTree('1part-2module-1series-1event');

                // Import a tree once so all the organisational units, series and events get created
                OrgUnitTestsUtil.assertImportOrgUnit(global.tests.admins.cam2013.client, part.id, importData, false, function() {

                    // Export the tree
                    OrgUnitTestsUtil.assertExportOrgUnit(global.tests.admins.cam2013.client, part.id, null, function(dataPostFirstImport) {

                        // Import the tree again. As nothing has changed in this import, this shouldn't
                        // have any real effect on the resulting tree
                        OrgUnitTestsUtil.assertImportOrgUnit(global.tests.admins.cam2013.client, part.id, importData, false, function() {
                            OrgUnitTestsUtil.assertExportOrgUnit(global.tests.admins.cam2013.client, part.id, null, function(dataPostSecondImport) {

                                assert.deepEqual(dataPostFirstImport, dataPostSecondImport);

                                // Import the entire tree again, but change the end date of a single event
                                _getNode(importData, 'eid-1111').end = '2015-04-21T16:45:00.000Z';
                                OrgUnitTestsUtil.assertImportOrgUnit(global.tests.admins.cam2013.client, part.id, importData, false, function() {
                                    OrgUnitTestsUtil.assertExportOrgUnit(global.tests.admins.cam2013.client, part.id, null, function(dataPostThirdImport) {

                                        // Only the event's end date should have changed in the exported data
                                        var expectedData = _.cloneDeep(dataPostFirstImport);
                                        _getNode(expectedData, 'eid-1111').end = '2015-04-21T16:45:00.000Z';
                                        assert.deepEqual(dataPostThirdImport, expectedData);
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that importing a tree without any children succeeds
         */
        it('verify importing a tree without any children', function(callback) {
            // Set up an organisational unit with some structure underneath it
            OrgUnitTestsUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test part', 'part', {}, function(part) {
                var importData = _getTestTree('1part-2module-1series-1event');
                OrgUnitTestsUtil.assertImportOrgUnit(global.tests.admins.cam2013.client, part.id, importData, false, function() {
                    OrgUnitTestsUtil.assertExportOrgUnit(global.tests.admins.cam2013.client, part.id, null, function(dataPostFirstImport) {

                        // Import an "empty tree". This resembles the case where a consumer is
                        // periodically sending data, but nothing has changed in the interval
                        importData = {};
                        OrgUnitTestsUtil.assertImportOrgUnit(global.tests.admins.cam2013.client, part.id, importData, false, function() {
                            OrgUnitTestsUtil.assertExportOrgUnit(global.tests.admins.cam2013.client, part.id, null, function(dataPostSecondImport) {
                                assert.deepEqual(dataPostFirstImport, dataPostSecondImport);

                                // Import a tree with only metadata about the top-level node
                                importData = {
                                    'displayName': 'Updated name',
                                    'published': true
                                };
                                OrgUnitTestsUtil.assertImportOrgUnit(global.tests.admins.cam2013.client, part.id, importData, false, function() {
                                    OrgUnitTestsUtil.assertExportOrgUnit(global.tests.admins.cam2013.client, part.id, null, function(dataPostThirdImport) {
                                        dataPostSecondImport.displayName = 'Updated name';
                                        dataPostSecondImport.published = true;
                                        assert.deepEqual(dataPostSecondImport, dataPostSecondImport);
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that importing a single event does not drop other data under the organisational unit
         */
        it('verify importing a single event', function(callback) {
            // Set up an organisational unit with some structure underneath it
            OrgUnitTestsUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test part', 'part', {}, function(part) {
                var importData = _getTestTree('1part-2module-2series-2event');
                OrgUnitTestsUtil.assertImportOrgUnit(global.tests.admins.cam2013.client, part.id, importData, false, function() {
                    OrgUnitTestsUtil.assertExportOrgUnit(global.tests.admins.cam2013.client, part.id, null, function(dataPostFirstImport) {

                        // Import a tree with a single event in it. This resembles the case where
                        // only 1 event has changed
                        importData = _getTestTree('1part-1module-1series-1event');
                        _getNode(importData, 'eid-1111').displayName = 'Updated displayName';
                        OrgUnitTestsUtil.assertImportOrgUnit(global.tests.admins.cam2013.client, part.id, importData, false, function() {

                            // Export the tree again, and compare it to the initial tree. Only
                            // 1 event should've changed
                            OrgUnitTestsUtil.assertExportOrgUnit(global.tests.admins.cam2013.client, part.id, null, function(dataPostSecondImport) {
                                _getNode(dataPostFirstImport, 'eid-1111').displayName = 'Updated displayName';
                                assert.deepEqual(dataPostFirstImport, dataPostSecondImport);

                                // Although deepEqual should cover this, sanity-check the right
                                // number of organisational units, series and events are returned
                                assert.deepEqual(dataPostSecondImport.children.length, 2);
                                assert.deepEqual(dataPostSecondImport.children[0].series.length, 2);
                                assert.deepEqual(dataPostSecondImport.children[0].series[0].events.length, 2);
                                assert.deepEqual(dataPostSecondImport.children[1].series.length, 2);
                                assert.deepEqual(dataPostSecondImport.children[1].series[1].events.length, 2);

                                return callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that missing data can be deleted from the tree
         */
        it('verify deleting missing data', function(callback) {
            // Set up an organisational unit with some structure underneath it
            OrgUnitTestsUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test part', 'part', {}, function(part) {
                var importData = _getTestTree('1part-2module-2series-2event');
                OrgUnitTestsUtil.assertImportOrgUnit(global.tests.admins.cam2013.client, part.id, importData, false, function() {
                    OrgUnitTestsUtil.assertExportOrgUnit(global.tests.admins.cam2013.client, part.id, null, function(dataPostFirstImport) {

                        // Subscribe a user to a few series. This allows us to verify that series get
                        // removed from user's calendars when they get removed through an import
                        TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {
                            var serie121 = _getNode(dataPostFirstImport, 'eid-121');
                            var serie122 = _getNode(dataPostFirstImport, 'eid-122');
                            SeriesTestsUtil.assertSubscribeSeries(simon.client, serie122.id, null, null, function() {
                                SeriesTestsUtil.assertSubscribeSeries(simon.client, serie121.id, null, null, function() {

                                    // Import a tree with a single event in it and delete everything else. This resembles
                                    // the situation where previous imports where erroneous and should be trashed
                                    importData = _getTestTree('1part-1module-1series-1event');
                                    _getNode(importData, 'eid-1111').displayName = 'Updated displayName';
                                    OrgUnitTestsUtil.assertImportOrgUnit(global.tests.admins.cam2013.client, part.id, importData, true, function() {

                                        // Export the tree, there should only be 1 event in the entire tree. All other
                                        // organisational units and series should've been removed
                                        OrgUnitTestsUtil.assertExportOrgUnit(global.tests.admins.cam2013.client, part.id, null, function(dataPostSecondImport) {

                                            // The second organisational unit should've been deleted
                                            assert.strictEqual(dataPostSecondImport.children.length, 1);
                                            assert.strictEqual(dataPostSecondImport.children[0].series.length, 1);
                                            assert.strictEqual(dataPostSecondImport.children[0].series[0].events.length, 1);

                                            // Because we delete the missing data, series and events
                                            // should have been removed from users their calendars
                                            UsersTestsUtil.assertGetUserCalendar(simon.client, simon.profile.id, '2010-01-01', '2020-12-31', [], function() {
                                                return callback();
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies deleting a single series from a tree
         */
        it('verify importing a tree and deleting a single series', function(callback) {
            // Set up an organisational unit with some structure underneath it
            OrgUnitTestsUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test part', 'part', {}, function(part) {
                var importData = _getTestTree('1part-2module-2series-2event');
                OrgUnitTestsUtil.assertImportOrgUnit(global.tests.admins.cam2013.client, part.id, importData, false, function() {
                    OrgUnitTestsUtil.assertExportOrgUnit(global.tests.admins.cam2013.client, part.id, null, function(dataPostFirstImport) {

                        // Delete a single series and import it
                        dataPostFirstImport.children[0].series.pop();
                        OrgUnitTestsUtil.assertImportOrgUnit(global.tests.admins.cam2013.client, part.id, dataPostFirstImport, true, function() {

                            // Export the tree, only the 1 series should've been removed
                            OrgUnitTestsUtil.assertExportOrgUnit(global.tests.admins.cam2013.client, part.id, null, function(dataPostSecondImport) {
                                assert.deepEqual(dataPostSecondImport, dataPostFirstImport);
                                assert.strictEqual(dataPostSecondImport.children.length, 2);
                                assert.strictEqual(dataPostSecondImport.children[0].series.length, 1);
                                assert.strictEqual(dataPostSecondImport.children[0].series[0].events.length, 2);
                                assert.strictEqual(dataPostSecondImport.children[1].series.length, 2);
                                assert.strictEqual(dataPostSecondImport.children[1].series[0].events.length, 2);
                                return callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that organisers can be linked through their shibboleth id
         */
        it('verify organisers can be linked through their shibboleth id', function(callback) {
            // Create a new tenant on which we can enable Shibboleth
            TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                TestsUtil.generateTestTenant(1, function(tenant, app) {

                    // Enable shibboleth
                    var defaultConfiguration = {
                        'enableShibbolethAuth': true,
                        'shibIdpEntityId': 'https://idp.olympia.edu/shibboleth',
                        'shibExternalIdAttributes': 'eppn persistent-id targeted-id',
                        'shibMapDisplayname': 'displayname cn',
                        'shibMapEmail': 'mail email eppn'
                    };
                    ConfigTestsUtil.assertUpdateConfig(globalAdminClient, app.id, defaultConfiguration, function() {

                        // Log in through shibboleth
                        var shibbolethId = util.format('shib-%s', _.random(10000));
                        var displayName = 'Jack McJackerson';
                        var attributes = {
                            'email': TestsUtil.generateTestEmailAddress(),
                            'displayname': displayName
                        };
                        AuthTestsUtil.assertShibbolethLogin(app, shibbolethId, attributes, null, function(restClient) {
                            UsersTestsUtil.assertGetMe(restClient, function(me) {
                                assert.ok(!me.anon);

                                // Create a new organisational unit
                                OrgUnitTestsUtil.assertCreateOrgUnit(globalAdminClient, 'Test part', 'part', {'app': app.id}, function(part) {

                                    // Import some data where the organiser will be linked
                                    var importData = _getTestTree('1part-1module-1series-1event');
                                    _getNode(importData, 'eid-1111').organisers = [{'shibbolethId': shibbolethId}];
                                    OrgUnitTestsUtil.assertImportOrgUnit(globalAdminClient, part.id, importData, false, function() {

                                        // Export the data and verify the user is linked on the event
                                        OrgUnitTestsUtil.assertExportOrgUnit(globalAdminClient, part.id, null, function(exportedData) {
                                            // Get the event
                                            var evt = _getNode(exportedData, 'eid-1111');

                                            // Assert the user was linked
                                            assert.strictEqual(evt.organisers.length, 1);
                                            assert.strictEqual(evt.organisers[0].id, me.id);
                                            assert.strictEqual(evt.organisers[0].shibbolethId, shibbolethId);
                                            assert.strictEqual(evt.organisers[0].displayName, displayName);
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that the correct groups are created
         */
        it('verify group creation', function(callback) {
            // Create a course
            OrgUnitTestsUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test course', 'course', {}, function(course) {

                // Import 2 parts, each with 2 modules, 2 series and 2 event
                var importData = _getTestTree('1course-2subject-2part-2module-2series-2event');
                OrgUnitTestsUtil.assertImportOrgUnit(global.tests.admins.cam2013.client, course.id, importData, false, function() {
                    OrgUnitTestsUtil.assertExportOrgUnit(global.tests.admins.cam2013.client, course.id, null, function(dataPostFirstImport) {

                        OrgUnitTestsUtil.getAllChildren(global.tests.admins.cam2013.client, course.AppId, [course.id], function(orgUnits, series) {
                            // There should be 14 child organisation units in total. Two subjects
                            // holding 2 parts with 2 modules each
                            var subjects = _.filter(orgUnits, {'type': 'subject'});
                            var parts = _.filter(orgUnits, {'type': 'part'});
                            var modules = _.filter(orgUnits, {'type': 'module'});
                            assert.strictEqual(subjects.length, 2);
                            assert.strictEqual(parts.length, 4);
                            assert.strictEqual(modules.length, 8);
                            assert.strictEqual(orgUnits.length, 14);

                            var subjectGroupIds = _.chain(subjects).pluck('GroupId').uniq().value().sort();
                            var partGroupIds = _.chain(parts).pluck('GroupId').uniq().value().sort();
                            var moduleGroupIds = _.chain(modules).pluck('GroupId').uniq().value().sort();

                            // Each subject should have a different group id
                            assert.strictEqual(subjectGroupIds.length, 2);

                            // Each part should have a different group id
                            assert.strictEqual(partGroupIds.length, 4);

                            // Parts should NOT inherit the subject or course's group id
                            assert.strictEqual(_.intersection([course.GroupId], subjectGroupIds).length, 0);
                            assert.strictEqual(_.intersection([course.GroupId], partGroupIds).length, 0);
                            assert.strictEqual(_.intersection(subjectGroupIds, partGroupIds).length, 0);

                            // Each module should inherit the parts' group ids
                            assert.deepEqual(moduleGroupIds, partGroupIds);

                            // Series should inherit the parts' group ids
                            var seriesGroupIds = _.chain(series).pluck('GroupId').uniq().value().sort();
                            assert.deepEqual(seriesGroupIds, partGroupIds);

                            // Events should inherit the parts' group ids
                            SeriesTestsUtil.getAllSeriesEvents(global.tests.admins.cam2013.client, _.pluck(series, 'id'), function(eventsPerSeries) {
                                var eventGroupIds = _.chain(eventsPerSeries)
                                    .values()
                                    .flatten()
                                    .pluck('GroupId')
                                    .uniq()
                                    .value()
                                    .sort();

                                assert.deepEqual(eventGroupIds, partGroupIds);

                                return callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that a part can be imported under a subject
         */
        it('verify importing a part under a subject', function(callback) {
            OrgUnitTestsUtil.createSimpleTree(global.tests.admins.cam2013.client, function(course, subject, part, module, series) {
                var importData = _getTestTree('1part-2module-1series-1event');
                OrgUnitTestsUtil.assertImportOrgUnit(global.tests.admins.cam2013.client, part.id, importData, false, function() {
                    return callback();
                });
            });
        });
    });

    describe('DAO', function() {

        /**
         * Test that verifies that the import logic uses transactions
         */
        it.skip('verify transactions', function(callback) {
            OrgUnitTestsUtil.createSimpleTree(global.tests.admins.cam2013.client, function(course, subject, part, module, series) {
                OrgUnitTestsUtil.assertExportOrgUnit(global.tests.admins.cam2013.client, part.id, 'json', function(exportedData) {

                    // Try to import some data but trigger an error by provided an invalid id
                    var importData = _getTestTree('1part-2module-1series-1event');
                    var mergedTree = OrgUnitImport.mergeTrees(exportedData, importData, true);
                    mergedTree.deletedEvents = [{'id': 'ohlawdy'}];
                    OrgUnitDAO.importTree(course.AppId, mergedTree, function(err) {
                        assert.ok(err);
                        assert.strictEqual(err.code, 500);

                        // Because of the transactions, no data should have been imported
                        OrgUnitTestsUtil.assertExportOrgUnit(global.tests.admins.cam2013.client, part.id, 'json', function(exportedDataPostImport) {
                            assert.deepEqual(exportedDataPostImport, exportedData);
                            return callback();
                        });
                    });
                });
            });
        });
    });
});
