/**
 * Copyright (c) 2015 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');
var assert = require('assert');
var moment = require('moment');

var GroupsTestsUtil = require('gh-groups/tests/util');
var TestsUtil = require('gh-tests');
var UsersTestsUtil = require('gh-users/tests/util');

var EventsTestsUtil = require('./util');

describe('Events', function() {

    describe('Organisers', function() {

        /**
         * Test that verifies that organisers their personal information is hidden
         */
        it('verify organisers their personal information is hidden', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 3, false, function(simon, nico, sam) {

                var start = moment().format();
                var end = moment().add(2, 'hour').format();

                // Create an event
                EventsTestsUtil.assertCreateEvent(simon.client, 'Test event', start, end, null, function(event) {

                    // Add Sam and Nico as organisers
                    var update = {};
                    update[nico.profile.id] = true;
                    update[sam.profile.id] = true;
                    EventsTestsUtil.assertUpdateEventOrganisers(simon.client, event.id, update, function() {

                        // Get the event
                        EventsTestsUtil.assertGetEvent(sam.client, event.id, null, function(event) {
                            assert.strictEqual(event.organisers.length, 2);
                            var organisersById = _.indexBy(event.organisers, 'id');

                            // Verify Nico's information is hidden
                            UsersTestsUtil.assertUser(organisersById[nico.profile.id], {'expectedUser': nico.profile, 'canViewPrivateFields': false});

                            // Sam his own personal info should be displayed
                            UsersTestsUtil.assertUser(organisersById[sam.profile.id], {'expectedUser': sam.profile, 'canViewPrivateFields': true});
                            return callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that organisers can be added and/or removed from events
         */
        it('verify organisers can be added and/or removed from events', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 3, false, function(simon, nico, sam) {

                var start = moment().format();
                var end = moment().add(2, 'hour').format();

                // Create an event
                EventsTestsUtil.assertCreateEvent(simon.client, 'Test event', start, end, null, function(event) {

                    // Add Nico as an organiser
                    var update = {};
                    update[nico.profile.id] = true;
                    EventsTestsUtil.assertUpdateEventOrganisers(simon.client, event.id, update, function() {

                        // Add a plain-text organiser
                        update = {'Mr Doo Little': true};
                        EventsTestsUtil.assertUpdateEventOrganisers(simon.client, event.id, update, function() {

                            // Add Sam and a plain-text organiser
                            update = {'Dr Jack Daniels': true};
                            update[sam.profile.id] = true;
                            EventsTestsUtil.assertUpdateEventOrganisers(simon.client, event.id, update, function() {

                                // Sanity-check all users are still persisted
                                EventsTestsUtil.assertGetEvent(simon.client, event.id, null, function(event) {
                                    assert.strictEqual(event.organisers.length, 4);

                                    // Remove Sam
                                    update = {};
                                    update[sam.profile.id] = false;
                                    EventsTestsUtil.assertUpdateEventOrganisers(simon.client, event.id, update, function() {

                                        // Remove a plain-text organiser
                                        update = {'Mr Doo Little': false};
                                        EventsTestsUtil.assertUpdateEventOrganisers(simon.client, event.id, update, function() {

                                            // Assert Nico and Jack Daniels are still left
                                            EventsTestsUtil.assertGetEvent(simon.client, event.id, null, function(event) {
                                                assert.strictEqual(event.organisers.length, 2);
                                                var organisers = _.partition(event.organisers, _.isObject);
                                                assert.strictEqual(organisers[0][0].id, nico.profile.id);
                                                assert.strictEqual(organisers[1][0], 'Dr Jack Daniels');

                                                // Remove Nico and a plain-text organiser
                                                update = {'Dr Jack Daniels': false};
                                                update[nico.profile.id] = false;
                                                EventsTestsUtil.assertUpdateEventOrganisers(simon.client, event.id, update, function() {

                                                    // Assert the events has no more managers
                                                    EventsTestsUtil.assertGetEvent(simon.client, event.id, null, function(event) {
                                                        assert.strictEqual(event.organisers.length, 0);
                                                        return callback();
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies validation when adding and/or removing organisers from events
         */
        it('verify validation when adding and/or removing organisers from events', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {
                var start = moment().format();
                var end = moment().add(2, 'hour').format();
                EventsTestsUtil.assertCreateEvent(simon.client, 'Test event', start, end, null, function(event) {

                    // Invalid event id
                    EventsTestsUtil.assertUpdateEventOrganisersFails(simon.client, 'not a number', {'Jack': true}, 400, function() {
                        // Unknown event id
                        EventsTestsUtil.assertUpdateEventOrganisersFails(simon.client, -1, {'Jack': true}, 404, function() {

                            // No organiser
                            EventsTestsUtil.assertUpdateEventOrganisersFails(simon.client, event.id, {}, 400, function() {

                                // Specified unknown user id
                                EventsTestsUtil.assertUpdateEventOrganisersFails(simon.client, event.id, {'-1': true}, 400, function() {

                                    // Not a boolean value
                                    EventsTestsUtil.assertUpdateEventOrganisersFails(simon.client, event.id, {'Dr Jack Daniels': 'Not a boolean'}, 400, function() {
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies authorization when adding and/or removing organisers from events
         */
        it('verify authorization when adding and/or removing organisers from events', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 4, false, function(simon, nico, sam, bert) {

                // Create an event that Nico organises
                var start = moment().format();
                var end = moment().add(2, 'hour').format();
                var opts = {
                    'organiserUsers': [nico.profile.id]
                };
                EventsTestsUtil.assertCreateEvent(simon.client, 'Test event', start, end, opts, function(event) {

                    var update = {'Dr Jack McJackerson': true};

                    // Anonymous users cannot update the organisers of an event
                    TestsUtil.getAnonymousAppUserClient(global.tests.apps.cam2013, function(anonymousClient) {
                        EventsTestsUtil.assertUpdateEventOrganisersFails(anonymousClient, event.id, update, 401, function() {
                            TestsUtil.getAnonymousGlobalAdminRestClient(function(anonymousGlobalAdminClient) {
                                EventsTestsUtil.assertUpdateEventOrganisersFails(anonymousGlobalAdminClient, event.id, update, 401, function() {

                                    // Authenticated users unrelated to the event cannot update the organisers of an event
                                    EventsTestsUtil.assertUpdateEventOrganisersFails(bert.client, event.id, update, 401, function() {

                                        // App admins from another application cannot update the organisers of an event
                                        EventsTestsUtil.assertUpdateEventOrganisersFails(global.tests.admins.oxford2014.client, event.id, update, 401, function() {

                                            // Organisers can update the organisers of the event
                                            EventsTestsUtil.assertUpdateEventOrganisers(nico.client, event.id, update, function() {

                                                // Members of the event's group can update the organisers of the event
                                                var membersUpdate = {};
                                                membersUpdate[sam.profile.id] = true;
                                                GroupsTestsUtil.assertUpdateGroupMembers(simon.client, event.GroupId, membersUpdate, function() {
                                                    EventsTestsUtil.assertUpdateEventOrganisers(sam.client, event.id, update, function() {

                                                        // Application admins can update the organisers of an event
                                                        EventsTestsUtil.assertUpdateEventOrganisers(global.tests.admins.cam2013.client, event.id, update, function() {

                                                            // Global admins can update the organisers of the event
                                                            TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                                                                EventsTestsUtil.assertUpdateEventOrganisers(globalAdminClient, event.id, update, function() {
                                                                    return callback();
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that users from other applications cannot be added as organisers to an event
         */
        it('verify users from other applications cannot be added as organisers to an event', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {
                TestsUtil.generateTestUsers(global.tests.apps.oxford2014, 2, false, function(nico) {

                    // Create an event that Nico organises
                    var start = moment().format();
                    var end = moment().add(2, 'hour').format();
                    EventsTestsUtil.assertCreateEvent(simon.client, 'Test event', start, end, null, function(event) {

                        var update = {};
                        update[nico.profile.id] = true;
                        EventsTestsUtil.assertUpdateEventOrganisersFails(global.tests.admins.cam2013.client, event.id, update, 400, callback);
                    });
                });
            });
        });
    });
});
